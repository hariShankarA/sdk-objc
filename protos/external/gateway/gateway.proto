syntax = "proto3";
package io.token.proto.gateway;

import "google/api/annotations.proto";

import "account.proto";
import "address.proto";
import "member.proto";
import "money.proto";
import "notification.proto";
import "security.proto";
import "token.proto";
import "transaction.proto";
import "transfer.proto";
import "subscriber.proto";

////////////////////////////////////////////////////////////////////////////////////////////////////
// Paging details.
//
message Page {
  string offset = 1;      // Opaque base-64 encoded offset for the client to roundtrip.
  int32 limit = 2;        // Max number of records to return.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member registration, key and username management.
//

message CreateMemberRequest {
  string nonce = 1;
}

message CreateMemberResponse {
  string member_id = 1;
}

message UpdateMemberRequest {
  io.token.proto.common.member.MemberUpdate update = 1;
  io.token.proto.common.security.Signature update_signature = 2;
}

message UpdateMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message GetMemberRequest {
}

message GetMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message UsernameExistsRequest {
  string username = 1;
}

message UsernameExistsResponse {
  bool exists = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member PII/addresses/preferences management.
//

message AddAddressRequest {
  string name = 1;
  io.token.proto.common.address.Address address = 2;
  io.token.proto.common.security.Signature address_signature = 3;
}

message AddAddressResponse {
  io.token.proto.common.member.AddressRecord address = 1;
}

message GetAddressRequest {
  string address_id = 1;
}

message GetAddressResponse {
  io.token.proto.common.member.AddressRecord address = 1;
}

message GetAddressesRequest {}

message GetAddressesResponse {
  repeated io.token.proto.common.member.AddressRecord addresses = 1;
}

message DeleteAddressRequest {
  string address_id = 1;
}

message DeleteAddressResponse {}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Notification service
//

message SubscribeToNotificationsRequest {
  string target = 1;   // e.g push token
  io.token.proto.common.subscriber.Platform platform = 2;
}

message SubscribeToNotificationsResponse {
  io.token.proto.common.subscriber.Subscriber subscriber = 1;
}

message GetSubscribersRequest {}

message GetSubscribersResponse {
  repeated io.token.proto.common.subscriber.Subscriber subscribers = 1;
}

message GetSubscriberRequest {
  string subscriber_id = 1;
}

message GetSubscriberResponse {
  io.token.proto.common.subscriber.Subscriber subscriber = 1;
}

message UnsubscribeFromNotificationsRequest {
  string subscriber_id = 1;
}

message UnsubscribeFromNotificationsResponse {}

message NotifyRequest {
  string username = 1;
  io.token.proto.common.notification.Notification notification = 2;
}

message NotifyResponse {}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank account management and information access.
//

message LinkAccountsRequest {
  string bank_id = 1;
  // encrypted AccountsLinkPayload
  repeated string account_link_payloads = 2;
}

message LinkAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message GetAccountRequest {
  string account_id = 1;
}

message GetAccountResponse {
  io.token.proto.common.account.Account account = 1;
}

message GetAccountsRequest {
}

message GetAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message GetBalanceRequest {
  string account_id = 1;
}

message GetBalanceResponse {
  io.token.proto.common.money.Money current = 1;
  io.token.proto.common.money.Money available = 2;
}

message GetTransactionRequest {
  string account_id = 1;
  string transaction_id = 2;
}

message GetTransactionResponse {
  io.token.proto.common.transaction.Transaction transaction = 1;
}

message GetTransactionsRequest {
  string account_id = 1;
  Page page = 2; // Optional paging settings.
}

message GetTransactionsResponse {
  repeated io.token.proto.common.transaction.Transaction transactions = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Transfer Tokens
//

message CreateTokenRequest {
  io.token.proto.common.token.TokenPayload payload = 1;
}

message CreateTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

message GetTokenRequest {
  string token_id = 1;
}

message GetTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

message GetTokensRequest {
  enum Type {
    INVALID = 0;
    ACCESS = 1;
    TRANSFER = 2;
  }
  Type type = 1;
  Page page = 2; // Optional paging settings.
}

message GetTokensResponse {
  repeated io.token.proto.common.token.Token tokens = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

message EndorseTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message EndorseTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

message CancelTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message CancelTokenResponse {
  io.token.proto.common.token.Token token = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Transfers.
//

message CreateTransferRequest {
  io.token.proto.common.transfer.Transfer.Payload payload = 1;
  io.token.proto.common.security.Signature payload_signature = 2;
}

message CreateTransferResponse {
  io.token.proto.common.transfer.Transfer transfer = 1;
}

message GetTransferRequest {
  string transfer_id = 1;
}

message GetTransferResponse {
  io.token.proto.common.transfer.Transfer transfer = 1;
}

message GetTransfersRequest {
  string token_id = 1;  // Optional token_id to filter transfers by.
  Page page = 2;        // Optional paging settings.
}

message GetTransfersResponse {
  repeated io.token.proto.common.transfer.Transfer transfers = 1;    // List of transfers.
  string offset = 2; // Optional offset state for the client to roundtrip.
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Gateway Service.
//

service GatewayService {

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member registration, key and username mamangement.
  //

  rpc CreateMember (CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
        post: "/members"
    };
  }

  rpc UpdateMember (UpdateMemberRequest) returns (UpdateMemberResponse) {
    option (google.api.http) = {
        post: "/members/{update.member_id}/updates"
    };
  }

  rpc GetMember (GetMemberRequest) returns (GetMemberResponse) {
    option (google.api.http) = {
        get: "/members"
    };
  }

  rpc UsernameExists (UsernameExistsRequest) returns (UsernameExistsResponse) {
    option (google.api.http) = {
      get: "/username-exists?username={username}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member addresses and preferences
  //

  rpc AddAddress (AddAddressRequest) returns (AddAddressResponse) {
    option (google.api.http) = {
        post: "/addresses"
    };
  }

  rpc GetAddress (GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
        get: "/addresses/{address_id}"
    };
  }

  rpc GetAddresses (GetAddressesRequest) returns (GetAddressesResponse) {
    option (google.api.http) = {
        get: "/addresses"
    };
  }

  rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse) {
    option (google.api.http) = {
        delete: "/addresses/{address_id}"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Devices for notification service
  //

  rpc SubscribeToNotifications (SubscribeToNotificationsRequest) returns (SubscribeToNotificationsResponse) {
    option (google.api.http) = {
        post: "/subscribers"
    };
  }

  rpc GetSubscribers (GetSubscribersRequest) returns (GetSubscribersResponse) {
    option (google.api.http) = {
        get: "/subscribers"
    };
  }

  rpc GetSubscriber (GetSubscriberRequest) returns (GetSubscriberResponse) {
    option (google.api.http) = {
        get: "/subscribers/{subscriber_id}"
    };
  }

  rpc UnsubscribeFromNotifications (UnsubscribeFromNotificationsRequest) returns (UnsubscribeFromNotificationsResponse) {
    option (google.api.http) = {
        delete: "/subscribers/{subscriber_id}"
    };
  }

  rpc Notify (NotifyRequest) returns (NotifyResponse) {
    option (google.api.http) = {
        post: "/notify"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Bank accounts.
  //

  rpc LinkAccounts (LinkAccountsRequest) returns (LinkAccountsResponse) {
    option (google.api.http) = {
        post: "/accounts"
    };
  }

  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}"
    };
  }

  rpc GetAccounts (GetAccountsRequest) returns (GetAccountsResponse) {
    option (google.api.http) = {
        get: "/accounts"
    };
  }

  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/balance"
    };
  }

  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions/{transaction_id}"
    };
  }

  rpc GetTransactions (GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions?offset={page.offset}&limit={page.limit}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Tokens.
  //

  rpc CreateToken (CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
        post: "/tokens"
    };
  }

  rpc GetToken (GetTokenRequest) returns (GetTokenResponse) {
    option (google.api.http) = {
        get: "/tokens/{token_id}"
    };
  }

  rpc GetTokens (GetTokensRequest) returns (GetTokensResponse) {
    option (google.api.http) = {
        get: "/tokens?type={type}&offset={page.offset}&limit={page.limit}"
    };
  }

  rpc EndorseToken (EndorseTokenRequest) returns (EndorseTokenResponse) {
    option (google.api.http) = {
        put: "/tokens/{token_id}/endorse"
    };
  }

  rpc CancelToken (CancelTokenRequest) returns (CancelTokenResponse) {
    option (google.api.http) = {
        put: "/tokens/{token_id}/cancel"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Token Transfers.
  //

  rpc CreateTransfer (CreateTransferRequest) returns (CreateTransferResponse) {
    option (google.api.http) = {
        post: "/transfers"
    };
  }

  rpc GetTransfer (GetTransferRequest) returns (GetTransferResponse) {
    option (google.api.http) = {
        get: "/transfers/{transfer_id}"
    };
  }

  rpc GetTransfers (GetTransfersRequest) returns (GetTransfersResponse) {
    option (google.api.http) = {
        get: "/transfers?token_id={token_id}&offset={page.offset}&limit={page.limit}"
    };
  }
}
