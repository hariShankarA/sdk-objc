syntax = "proto3";
package io.token.proto.gateway;

import "google/api/annotations.proto";

import "account.proto";
import "device.proto";
import "member.proto";
import "money.proto";
import "paging.proto";
import "payment.proto";
import "security.proto";
import "token.proto";
import "transaction.proto";


////////////////////////////////////////////////////////////////////////////////////////////////////
// Member registration, key and alias mamangement.
//

message CreateMemberRequest {
  string nonce = 1;
}

message CreateMemberResponse {
  string member_id = 1;
}

message UpdateMemberRequest {
  io.token.proto.common.member.MemberUpdate update = 1;
  io.token.proto.common.security.Signature update_signature = 2;
}

message UpdateMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message GetMemberRequest {
}

message GetMemberResponse {
  io.token.proto.common.member.Member member = 1;
}

message AliasExistsRequest {
  string alias = 1;
}

message AliasExistsResponse {
  bool exists = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Member PII/addresses/preferences management.
//

message AddAddressRequest {
  string name = 1;
  string data = 2;
  io.token.proto.common.security.Signature data_signature = 3;
}

message AddAddressResponse {
  io.token.proto.common.member.Address address = 1;
}

message GetAddressRequest {
  string address_id = 1;
}

message GetAddressResponse {
  io.token.proto.common.member.Address address = 1;
}

message GetAddressesRequest {}

message GetAddressesResponse {
  repeated io.token.proto.common.member.Address addresses = 1;
}

message DeleteAddressRequest {
  string address_id = 1;
}

message DeleteAddressResponse {}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Notification service device management
//

message SubscribeDeviceRequest {
    string provider = 1;
    string notification_uri = 2;   // device_id
    io.token.proto.common.device.Platform platform = 3;
    repeated string tags = 4;
}

message SubscribeDeviceResponse {
}

message UnsubscribeDeviceRequest {
    string provider = 1;
    string notification_uri = 2;
}

message UnsubscribeDeviceResponse {
}

// Notify existing subscribers that a bank linking payload has been created
message NotifyLinkAccountsRequest {
  string alias = 1;
  string bank_id = 2;

  // encrypted AccountsLinkPayload
  string accounts_link_payload = 3;
}

message NotifyLinkAccountsResponse {
}

message NotifyAddKeyRequest {
    string alias = 1;
    string public_key = 2;
    repeated string tags = 3;
}

message NotifyAddKeyResponse {
}

// Notify existing subscribers that a bank linking payload has been created
//, as well as request a key to be added
message NotifyLinkAccountsAndAddKeyRequest {
  string alias = 1;
  string bank_id = 2;

  // encrypted AccountsLinkPayload
  string accounts_link_payload = 3;

  string public_key = 4;
  repeated string tags = 5;
}

message NotifyLinkAccountsAndAddKeyResponse {
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Bank account management and information access.
//

message LinkAccountsRequest {
  string bank_id = 1;
  // encrypted AccountsLinkPayload
  string accounts_link_payload = 2;
}

message LinkAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message GetAccountRequest {
  string account_id = 1;
}

message GetAccountResponse {
  io.token.proto.common.account.Account account = 1;
}

message GetAccountsRequest {
}

message GetAccountsResponse {
  repeated io.token.proto.common.account.Account accounts = 1;
}

message SetAccountNameRequest {
  string account_id = 1;
  string name = 2;
}

message SetAccountNameResponse {
  io.token.proto.common.account.Account account = 1;
}

message GetBalanceRequest {
  string account_id = 1;
}

message GetBalanceResponse {
  io.token.proto.common.money.Money current = 1;
  io.token.proto.common.money.Money available = 2;
}

message GetTransactionRequest {
  string account_id = 1;
  string transaction_id = 2;
}

message GetTransactionResponse {
  io.token.proto.common.transaction.Transaction transaction = 1;
}

message GetTransactionsRequest {
  string account_id = 1;
  io.token.proto.common.paging.Page page = 2; // Optional paging settings.
}

message GetTransactionsResponse {
  repeated io.token.proto.common.transaction.Transaction transactions = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Payment Tokens.
//

message CreatePaymentTokenRequest {
  io.token.proto.common.token.PaymentToken.Payload payload = 1;
}

message CreatePaymentTokenResponse {
  io.token.proto.common.token.PaymentToken token = 1;
}

message GetPaymentTokenRequest {
   string token_id = 2;
}

message GetPaymentTokenResponse {
  io.token.proto.common.token.PaymentToken token = 1;
}

message GetPaymentTokensRequest {
  io.token.proto.common.paging.Page page = 1; // Optional paging settings.
}

message GetPaymentTokensResponse {
  repeated io.token.proto.common.token.PaymentToken tokens = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

message EndorsePaymentTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message EndorsePaymentTokenResponse {
  io.token.proto.common.token.PaymentToken token = 1;
}

message CancelPaymentTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message CancelPaymentTokenResponse {
  io.token.proto.common.token.PaymentToken token = 1;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessTokens.
//

message CreateAccessTokenRequest {
  io.token.proto.common.token.AccessToken.Payload payload = 1;
}

message CreateAccessTokenResponse {
  io.token.proto.common.token.AccessToken token = 1;
}

message GetAccessTokenRequest {
  string token_id = 2;
}

message GetAccessTokenResponse {
  io.token.proto.common.token.AccessToken token = 1;
}

message GetAccessTokensRequest {
  io.token.proto.common.paging.Page page = 1; // Optional paging settings.
}

message GetAccessTokensResponse {
  repeated io.token.proto.common.token.AccessToken tokens = 1;
  string offset = 2; // Optional offset state for the client to roundtrip.
}

message EndorseAccessTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message EndorseAccessTokenResponse {
  io.token.proto.common.token.AccessToken token = 1;
}

message CancelAccessTokenRequest {
  string token_id = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message CancelAccessTokenResponse {
  io.token.proto.common.token.AccessToken token = 1;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Payments.
//

message RedeemPaymentTokenRequest {
  io.token.proto.common.payment.PaymentPayload payload = 1;
  io.token.proto.common.security.Signature payload_signature = 2;
}

message RedeemPaymentTokenResponse {
  io.token.proto.common.payment.Payment payment = 1;
}

message GetPaymentRequest {
  string payment_id = 1;
}

message GetPaymentResponse {
  io.token.proto.common.payment.Payment payment = 1;
}

message GetPaymentsRequest {
  string token_id = 1;                    // Optional token_id to filter payments by.
  io.token.proto.common.paging.Page page = 2; // Optional paging settings.
}

message GetPaymentsResponse {
  repeated io.token.proto.common.payment.Payment payments = 1;    // List of payments.
  string offset = 2; // Optional offset state for the client to roundtrip.
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Gateway Service.
//

service GatewayService {

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member registration, key and alias mamangement.
  //

  rpc CreateMember (CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
        post: "/members"
    };
  }

  rpc UpdateMember (UpdateMemberRequest) returns (UpdateMemberResponse) {
    option (google.api.http) = {
        post: "/members/{update.member_id}"
    };
  }

  rpc GetMember (GetMemberRequest) returns (GetMemberResponse) {
    option (google.api.http) = {
        get: "/member"
    };
  }

  rpc AliasExists (AliasExistsRequest) returns (AliasExistsResponse) {
    option (google.api.http) = {
      get: "/alias-exists?alias={alias}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Member addresses and preferences
  //

  rpc AddAddress (AddAddressRequest) returns (AddAddressResponse) {
    option (google.api.http) = {
        post: "/addresses"
    };
  }

  rpc GetAddress (GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
        get: "/addresses/{address_id}"
    };
  }

  rpc GetAddresses (GetAddressesRequest) returns (GetAddressesResponse) {
    option (google.api.http) = {
        get: "/addresses"
    };
  }

  rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse) {
    option (google.api.http) = {
        delete: "/addresses/{address_id}"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Devices for notification service
  //

  rpc SubscribeDevice (SubscribeDeviceRequest) returns (SubscribeDeviceResponse) {
    option (google.api.http) = {
        post: "/devices"
    };
  }

  rpc UnsubscribeDevice (UnsubscribeDeviceRequest) returns (UnsubscribeDeviceResponse) {
    option (google.api.http) = {
        delete: "/devices/{device_id}"
    };
  }

  rpc NotifyLinkAccounts (NotifyLinkAccountsRequest) returns (NotifyLinkAccountsResponse) {
    option (google.api.http) = {
        put: "/devices/notifyLinkAccounts"
    };
  }

  rpc NotifyAddKey (NotifyAddKeyRequest) returns (NotifyAddKeyResponse) {
    option (google.api.http) = {
        put: "/devices/notifyAddKey"
    };
  }

  rpc NotifyLinkAccountsAndAddKey (NotifyLinkAccountsAndAddKeyRequest) returns (NotifyLinkAccountsAndAddKeyResponse) {
    option (google.api.http) = {
        put: "/devices/notifyLinkAccountsAndAddKey"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Bank accounts.
  //

  rpc LinkAccounts (LinkAccountsRequest) returns (LinkAccountsResponse) {
    option (google.api.http) = {
        post: "/accounts"
    };
  }

  rpc GetAccount (GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}"
    };
  }

  rpc GetAccounts (GetAccountsRequest) returns (GetAccountsResponse) {
    option (google.api.http) = {
        get: "/accounts"
    };
  }

  rpc SetAccountName (SetAccountNameRequest) returns (SetAccountNameResponse) {
    option (google.api.http) = {
        patch: "/accounts/{account_id}?name={name}"
    };
  }

  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/balance"
    };
  }

  rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions/{transaction_id}"
    };
  }

  rpc GetTransactions (GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
        get: "/accounts/{account_id}/transactions?offset={offset}&limit={limit}"
    };
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Payment Tokens.
  //

  rpc CreatePaymentToken (CreatePaymentTokenRequest) returns (CreatePaymentTokenResponse) {
    option (google.api.http) = {
        post: "/payment-tokens"
    };
  }

  rpc GetPaymentToken (GetPaymentTokenRequest) returns (GetPaymentTokenResponse) {
    option (google.api.http) = {
        get: "/payment-tokens/{token_id}"
    };
  }

  rpc GetPaymentTokens (GetPaymentTokensRequest) returns (GetPaymentTokensResponse) {
    option (google.api.http) = {
        get: "/payment-tokens?offset={offset}&limit={limit}"
    };
  }

  rpc EndorsePaymentToken (EndorsePaymentTokenRequest) returns (EndorsePaymentTokenResponse) {
    option (google.api.http) = {
        put: "/payment-tokens/{token_id}/endorse"
    };
  }

  rpc CancelPaymentToken (CancelPaymentTokenRequest) returns (CancelPaymentTokenResponse) {
    option (google.api.http) = {
        put: "/payment-tokens/{token_id}/cancel"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Access Tokens.
  //

  rpc CreateAccessToken (CreateAccessTokenRequest) returns (CreateAccessTokenResponse) {
    option (google.api.http) = {
        post: "/access-tokens"
    };
  }

  rpc GetAccessToken (GetAccessTokenRequest) returns (GetAccessTokenResponse) {
    option (google.api.http) = {
        get: "/access-tokens/{token_id}"
    };
  }

  rpc GetAccessTokens (GetAccessTokensRequest) returns (GetAccessTokensResponse) {
    option (google.api.http) = {
        get: "/access-tokens?offset={offset}&limit={limit}"
    };
  }

  rpc EndorseAccessToken (EndorseAccessTokenRequest) returns (EndorseAccessTokenResponse) {
    option (google.api.http) = {
        put: "/access-tokens/{token_id}/endorse"
    };
  }

  rpc CancelAccessToken (CancelAccessTokenRequest) returns (CancelAccessTokenResponse) {
    option (google.api.http) = {
        put: "/access-tokens/{token_id}/cancel"
    };
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////
  // Token Payments.
  //

  rpc RedeemPaymentToken (RedeemPaymentTokenRequest) returns (RedeemPaymentTokenResponse) {
    option (google.api.http) = {
        post: "/payments"
    };
  }

  rpc GetPayment (GetPaymentRequest) returns (GetPaymentResponse) {
    option (google.api.http) = {
        get: "/payments/{payment_id}"
    };
  }

  rpc GetPayments (GetPaymentsRequest) returns (GetPaymentsResponse) {
    option (google.api.http) = {
        get: "/payments?token_id={token_id}&offset={offset}&limit={limit}"
    };
  }
}
