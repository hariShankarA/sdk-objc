syntax = "proto3";
package io.token.proto.common.token;

option java_outer_classname = "TokenProtos";

import "security.proto";
import "transfer.proto";


//
// Generic token envelope definition.
//
message Token {
  string id = 1;                                          // Computed as sha(token).
  TokenPayload payload = 2;                               // Token payload, being signed.
  repeated TokenSignature payload_signatures = 3;         // Payload signatures.
}

message TokenSignature {
  // List of valid actions that one can perform on the Token. We use lowercase string value
  // of the action when computing a signature.
  enum Action {
    INVALID   = 0;
    ENDORSED  = 1;                                        // Endorses token. Both payer and payer bank co-endorse the token.
    CANCELLED = 2;                                        // Revoked by the payer or declined by the redeemer.
  }

  Action action = 1;
  io.token.proto.common.security.Signature signature = 2;
}

message TokenMember {
  string id = 1;
  string username = 2;
  string name = 3;
}

message TokenPayload {
  string version = 1;                                   // 1.0
  string nonce = 2;                                     // nonce, random string used to de-dupe tokens, set by client.

  TokenMember issuer = 3;                               // Token issuer, bank.
  TokenMember from = 4;                                 // Payer member.
  TokenMember to = 5;                                   // Payee member.

  int64 effective_at_ms = 6;                            // Optional
  int64 expires_at_ms = 7;                              // Optional
  string description = 8;                               // Optional

  oneof body {
    TransferBody transfer = 9;
    AccessBody access = 10;
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Transfer Token
//

message TransferBody {
  TokenMember redeemer = 1;                                             // Redeemer member.
  io.token.proto.common.transfer.TransferInstructions instructions = 2; // Transfer instructions.
  TokenMember fees_paid_by = 3;                                         // Payer or redeemer member id.
  string currency = 4;                                                  // Optional: ISO4217, 3 letter currency code such as "USD" or "EUR".
  string lifetime_amount = 5;                                           // Optional: Token total lifetime amount. Double.
  string amount = 6;                                                    // Optional: Single token charge request acceptable range. Double.
  map<string, Var> vars = 7;                                            // Optional: token variables.
}

// Describes a single variable value. Only one of the fields is set.
message Var {
  DoubleRange range = 1;                                  // Used to represent amount range.
  repeated string one_of = 2;                             // An array of strings a value must belong to.
  string regex = 3;                                       // Regex match.
  string value = 4;                                       // Plain string value.
  TimePeriod period = 5;                                  // Amount per time period.
}

// A range of a double value, used for amounts. The doubles are sent as strings over the wire.
message DoubleRange {
  string min = 1;
  string max = 2;
  string default = 3;
}

// Time period description for multi use transfer tokens.
message TimePeriod {
  string duration = 1;                                    // ISO8601 duration. E.g.: P1M for 1 month.
  string max = 2;                                         // Max amount for the given duration.
}


////////////////////////////////////////////////////////////////////////////////////////////////////
// Access Token
//

message AccessBody {
  repeated Resource resources = 5;                      // Each entry defines an resources level

  message Resource {
    oneof resource {
      Address address = 1;
      Account account = 2;
      Transaction transaction = 3;
    }

    // Provides Access to member address information
    message Address {
      string address_id = 1;                              // Optional
    }

    // Provides access to member account balance
    message Account {
      string account_id = 1;                              // Optional
    }

    // Provides access to account transactions
    message Transaction {
      string account_id = 1;                              // Optional
    }
  }
}
