// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Money.pbobjc.h"
 #import "Security.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MoneyRoot

@implementation MoneyRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MoneyRoot_FileDescriptor

static GPBFileDescriptor *MoneyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.money"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Money

@implementation Money

@dynamic currency;
@dynamic value;

typedef struct Money__storage_ {
  uint32_t _has_storage_[1];
  NSString *currency;
  NSString *value;
} Money__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = Money_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Money__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Money_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Money__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Money class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Money__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Fee

@implementation Fee

@dynamic hasAmount, amount;
@dynamic description_p;

typedef struct Fee__storage_ {
  uint32_t _has_storage_[1];
  Money *amount;
  NSString *description_p;
} Fee__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = Fee_FieldNumber_Amount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Fee__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Fee_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Fee__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Fee class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Fee__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FxRate

@implementation FxRate

@dynamic baseCurrency;
@dynamic quoteCurrency;
@dynamic rate;
@dynamic createdAtMs;

typedef struct FxRate__storage_ {
  uint32_t _has_storage_[1];
  NSString *baseCurrency;
  NSString *quoteCurrency;
  NSString *rate;
  int64_t createdAtMs;
} FxRate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseCurrency",
        .dataTypeSpecific.className = NULL,
        .number = FxRate_FieldNumber_BaseCurrency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FxRate__storage_, baseCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quoteCurrency",
        .dataTypeSpecific.className = NULL,
        .number = FxRate_FieldNumber_QuoteCurrency,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FxRate__storage_, quoteCurrency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rate",
        .dataTypeSpecific.className = NULL,
        .number = FxRate_FieldNumber_Rate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FxRate__storage_, rate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.className = NULL,
        .number = FxRate_FieldNumber_CreatedAtMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FxRate__storage_, createdAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FxRate class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FxRate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FxQuote

@implementation FxQuote

@dynamic id_p;
@dynamic hasFromAmount, fromAmount;
@dynamic hasToAmount, toAmount;
@dynamic hasFxRate, fxRate;

typedef struct FxQuote__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  Money *fromAmount;
  Money *toAmount;
  FxRate *fxRate;
} FxQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FxQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FxQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromAmount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = FxQuote_FieldNumber_FromAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FxQuote__storage_, fromAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "toAmount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = FxQuote_FieldNumber_ToAmount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FxQuote__storage_, toAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fxRate",
        .dataTypeSpecific.className = GPBStringifySymbol(FxRate),
        .number = FxQuote_FieldNumber_FxRate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FxQuote__storage_, fxRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FxQuote class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FxQuote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferQuote

@implementation TransferQuote

@dynamic id_p;
@dynamic referenceId;
@dynamic hasFeesTotal, feesTotal;
@dynamic feesArray, feesArray_Count;
@dynamic hasFxQuote, fxQuote;
@dynamic expiresAtMs;

typedef struct TransferQuote__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *referenceId;
  Money *feesTotal;
  NSMutableArray *feesArray;
  FxQuote *fxQuote;
  int64_t expiresAtMs;
} TransferQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TransferQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "referenceId",
        .dataTypeSpecific.className = NULL,
        .number = TransferQuote_FieldNumber_ReferenceId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, referenceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "feesTotal",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = TransferQuote_FieldNumber_FeesTotal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, feesTotal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "feesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Fee),
        .number = TransferQuote_FieldNumber_FeesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, feesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fxQuote",
        .dataTypeSpecific.className = GPBStringifySymbol(FxQuote),
        .number = TransferQuote_FieldNumber_FxQuote,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, fxQuote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiresAtMs",
        .dataTypeSpecific.className = NULL,
        .number = TransferQuote_FieldNumber_ExpiresAtMs,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TransferQuote__storage_, expiresAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferQuote class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferQuote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignedTransferQuote

@implementation SignedTransferQuote

@dynamic hasQuote, quote;
@dynamic hasSignature, signature;

typedef struct SignedTransferQuote__storage_ {
  uint32_t _has_storage_[1];
  TransferQuote *quote;
  Signature *signature;
} SignedTransferQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "quote",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferQuote),
        .number = SignedTransferQuote_FieldNumber_Quote,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignedTransferQuote__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = SignedTransferQuote_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SignedTransferQuote__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignedTransferQuote class]
                                     rootClass:[MoneyRoot class]
                                          file:MoneyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignedTransferQuote__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
