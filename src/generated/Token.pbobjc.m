// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Wrappers.pbobjc.h>
#else
 #import "google/protobuf/Wrappers.pbobjc.h"
#endif

 #import "Token.pbobjc.h"
 #import "Security.pbobjc.h"
 #import "Transfer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TokenRoot

@implementation TokenRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
    [registry addExtensions:[SecurityRoot extensionRegistry]];
    [registry addExtensions:[TransferRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TokenRoot_FileDescriptor

static GPBFileDescriptor *TokenRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.token"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Token

@implementation Token

@dynamic tokenOneOfCase;
@dynamic id_p;
@dynamic payment;
@dynamic information;
@dynamic signaturesArray, signaturesArray_Count;

typedef struct Token__storage_ {
  uint32_t _has_storage_[2];
  NSString *id_p;
  PaymentToken *payment;
  InformationToken *information;
  NSMutableArray *signaturesArray;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payment",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = Token_FieldNumber_Payment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Token__storage_, payment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "information",
        .dataTypeSpecific.className = GPBStringifySymbol(InformationToken),
        .number = Token_FieldNumber_Information,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Token__storage_, information),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "signaturesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenSignature),
        .number = Token_FieldNumber_SignaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Token__storage_, signaturesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "token",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Token_ClearTokenOneOfCase(Token *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - TokenSignature

@implementation TokenSignature

@dynamic action;
@dynamic hasSignature, signature;

typedef struct TokenSignature__storage_ {
  uint32_t _has_storage_[1];
  TokenSignature_Action action;
  Signature *signature;
} TokenSignature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = TokenSignature_Action_EnumDescriptor,
        .number = TokenSignature_FieldNumber_Action,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenSignature__storage_, action),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = TokenSignature_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenSignature__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenSignature class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenSignature__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TokenSignature_Action_RawValue(TokenSignature *message) {
  GPBDescriptor *descriptor = [TokenSignature descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenSignature_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetTokenSignature_Action_RawValue(TokenSignature *message, int32_t value) {
  GPBDescriptor *descriptor = [TokenSignature descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TokenSignature_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum TokenSignature_Action

GPBEnumDescriptor *TokenSignature_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Endorsed\000Declined\000Revoked\000";
    static const int32_t values[] = {
        TokenSignature_Action_Invalid,
        TokenSignature_Action_Endorsed,
        TokenSignature_Action_Declined,
        TokenSignature_Action_Revoked,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TokenSignature_Action)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TokenSignature_Action_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TokenSignature_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case TokenSignature_Action_Invalid:
    case TokenSignature_Action_Endorsed:
    case TokenSignature_Action_Declined:
    case TokenSignature_Action_Revoked:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PaymentToken

@implementation PaymentToken

@dynamic scheme;
@dynamic nonce;
@dynamic hasIssuer, issuer;
@dynamic hasPayer, payer;
@dynamic hasRedeemer, redeemer;
@dynamic hasTransfer, transfer;
@dynamic hasFeesPaidBy, feesPaidBy;
@dynamic currency;
@dynamic lifetimeAmount;
@dynamic amount;
@dynamic effectiveAtMs;
@dynamic expiresAtMs;
@dynamic description_p;
@dynamic vars, vars_Count;

typedef struct PaymentToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *scheme;
  NSString *nonce;
  TokenMember *issuer;
  TokenMember *payer;
  TokenMember *redeemer;
  Transfer *transfer;
  TokenMember *feesPaidBy;
  NSString *currency;
  NSString *lifetimeAmount;
  NSString *amount;
  NSString *description_p;
  NSMutableDictionary *vars;
  int64_t effectiveAtMs;
  int64_t expiresAtMs;
} PaymentToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheme",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_Scheme,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, scheme),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_Nonce,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "issuer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = PaymentToken_FieldNumber_Issuer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, issuer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = PaymentToken_FieldNumber_Payer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, payer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "redeemer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = PaymentToken_FieldNumber_Redeemer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, redeemer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = PaymentToken_FieldNumber_Transfer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "feesPaidBy",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = PaymentToken_FieldNumber_FeesPaidBy,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, feesPaidBy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currency",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_Currency,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, currency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lifetimeAmount",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_LifetimeAmount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, lifetimeAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_Amount,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "effectiveAtMs",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_EffectiveAtMs,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, effectiveAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expiresAtMs",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_ExpiresAtMs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, expiresAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = PaymentToken_FieldNumber_Description_p,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vars",
        .dataTypeSpecific.className = GPBStringifySymbol(Var),
        .number = PaymentToken_FieldNumber_Vars,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PaymentToken__storage_, vars),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PaymentToken class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PaymentToken__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenMember

@implementation TokenMember

@dynamic id_p;
@dynamic alias;
@dynamic name;

typedef struct TokenMember__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *alias;
  NSString *name;
} TokenMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = TokenMember_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenMember__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = TokenMember_FieldNumber_Alias,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenMember__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = TokenMember_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TokenMember__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenMember class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenMember__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Var

@implementation Var

@dynamic hasRange, range;
@dynamic oneOfArray, oneOfArray_Count;
@dynamic regex;
@dynamic value;
@dynamic hasPeriod, period;

typedef struct Var__storage_ {
  uint32_t _has_storage_[1];
  DoubleRange *range;
  NSMutableArray *oneOfArray;
  NSString *regex;
  NSString *value;
  TimePeriod *period;
} Var__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "range",
        .dataTypeSpecific.className = GPBStringifySymbol(DoubleRange),
        .number = Var_FieldNumber_Range,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Var__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "oneOfArray",
        .dataTypeSpecific.className = NULL,
        .number = Var_FieldNumber_OneOfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Var__storage_, oneOfArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "regex",
        .dataTypeSpecific.className = NULL,
        .number = Var_FieldNumber_Regex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Var__storage_, regex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Var_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Var__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "period",
        .dataTypeSpecific.className = GPBStringifySymbol(TimePeriod),
        .number = Var_FieldNumber_Period,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Var__storage_, period),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Var class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Var__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DoubleRange

@implementation DoubleRange

@dynamic min;
@dynamic max;
@dynamic default_p;

typedef struct DoubleRange__storage_ {
  uint32_t _has_storage_[1];
  NSString *min;
  NSString *max;
  NSString *default_p;
} DoubleRange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRange_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DoubleRange__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRange_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DoubleRange__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "default_p",
        .dataTypeSpecific.className = NULL,
        .number = DoubleRange_FieldNumber_Default_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DoubleRange__storage_, default_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DoubleRange class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DoubleRange__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TimePeriod

@implementation TimePeriod

@dynamic duration;
@dynamic max;

typedef struct TimePeriod__storage_ {
  uint32_t _has_storage_[1];
  NSString *duration;
  NSString *max;
} TimePeriod__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = TimePeriod_FieldNumber_Duration,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TimePeriod__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = TimePeriod_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TimePeriod__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TimePeriod class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TimePeriod__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InformationToken

@implementation InformationToken

@dynamic scheme;
@dynamic nonce;
@dynamic hasMember, member;
@dynamic hasRedeemer, redeemer;
@dynamic aclArray, aclArray_Count;
@dynamic effectiveAtMs;
@dynamic expiresAtMs;
@dynamic description_p;

typedef struct InformationToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *scheme;
  NSString *nonce;
  TokenMember *member;
  TokenMember *redeemer;
  NSMutableArray *aclArray;
  NSString *description_p;
  int64_t effectiveAtMs;
  int64_t expiresAtMs;
} InformationToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheme",
        .dataTypeSpecific.className = NULL,
        .number = InformationToken_FieldNumber_Scheme,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InformationToken__storage_, scheme),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = InformationToken_FieldNumber_Nonce,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InformationToken__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = InformationToken_FieldNumber_Member,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InformationToken__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "redeemer",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenMember),
        .number = InformationToken_FieldNumber_Redeemer,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InformationToken__storage_, redeemer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "aclArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InformationTokenAcl),
        .number = InformationToken_FieldNumber_AclArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InformationToken__storage_, aclArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectiveAtMs",
        .dataTypeSpecific.className = NULL,
        .number = InformationToken_FieldNumber_EffectiveAtMs,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InformationToken__storage_, effectiveAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expiresAtMs",
        .dataTypeSpecific.className = NULL,
        .number = InformationToken_FieldNumber_ExpiresAtMs,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InformationToken__storage_, expiresAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = InformationToken_FieldNumber_Description_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InformationToken__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InformationToken class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InformationToken__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InformationTokenAcl

@implementation InformationTokenAcl

@dynamic method;
@dynamic uri;
@dynamic query, query_Count;
@dynamic fieldsArray, fieldsArray_Count;

typedef struct InformationTokenAcl__storage_ {
  uint32_t _has_storage_[1];
  InformationTokenAcl_HttpMethod method;
  NSString *uri;
  NSMutableDictionary *query;
  NSMutableArray *fieldsArray;
} InformationTokenAcl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = InformationTokenAcl_HttpMethod_EnumDescriptor,
        .number = InformationTokenAcl_FieldNumber_Method,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InformationTokenAcl__storage_, method),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = InformationTokenAcl_FieldNumber_Uri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InformationTokenAcl__storage_, uri),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "query",
        .dataTypeSpecific.className = NULL,
        .number = InformationTokenAcl_FieldNumber_Query,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InformationTokenAcl__storage_, query),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.className = NULL,
        .number = InformationTokenAcl_FieldNumber_FieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InformationTokenAcl__storage_, fieldsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InformationTokenAcl class]
                                     rootClass:[TokenRoot class]
                                          file:TokenRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InformationTokenAcl__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InformationTokenAcl_Method_RawValue(InformationTokenAcl *message) {
  GPBDescriptor *descriptor = [InformationTokenAcl descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InformationTokenAcl_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetInformationTokenAcl_Method_RawValue(InformationTokenAcl *message, int32_t value) {
  GPBDescriptor *descriptor = [InformationTokenAcl descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InformationTokenAcl_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum InformationTokenAcl_HttpMethod

GPBEnumDescriptor *InformationTokenAcl_HttpMethod_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Get\000Put\000Post\000Delete\000";
    static const int32_t values[] = {
        InformationTokenAcl_HttpMethod_Invalid,
        InformationTokenAcl_HttpMethod_Get,
        InformationTokenAcl_HttpMethod_Put,
        InformationTokenAcl_HttpMethod_Post,
        InformationTokenAcl_HttpMethod_Delete,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(InformationTokenAcl_HttpMethod)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:InformationTokenAcl_HttpMethod_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL InformationTokenAcl_HttpMethod_IsValidValue(int32_t value__) {
  switch (value__) {
    case InformationTokenAcl_HttpMethod_Invalid:
    case InformationTokenAcl_HttpMethod_Get:
    case InformationTokenAcl_HttpMethod_Put:
    case InformationTokenAcl_HttpMethod_Post:
    case InformationTokenAcl_HttpMethod_Delete:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
