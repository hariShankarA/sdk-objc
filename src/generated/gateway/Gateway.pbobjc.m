// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/gateway.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gateway/Gateway.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
 #import "Account.pbobjc.h"
 #import "Member.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Security.pbobjc.h"
 #import "Payment.pbobjc.h"
 #import "Token.pbobjc.h"
 #import "Transaction.pbobjc.h"
 #import "Device.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GatewayRoot

@implementation GatewayRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[AccountRoot extensionRegistry]];
    [registry addExtensions:[MemberRoot extensionRegistry]];
    [registry addExtensions:[MoneyRoot extensionRegistry]];
    [registry addExtensions:[SecurityRoot extensionRegistry]];
    [registry addExtensions:[PaymentRoot extensionRegistry]];
    [registry addExtensions:[TokenRoot extensionRegistry]];
    [registry addExtensions:[TransactionRoot extensionRegistry]];
    [registry addExtensions:[DeviceRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GatewayRoot_FileDescriptor

static GPBFileDescriptor *GatewayRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.gateway"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CreateMemberRequest

@implementation CreateMemberRequest

@dynamic nonce;

typedef struct CreateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *nonce;
} CreateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberRequest_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberRequest__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateMemberResponse

@implementation CreateMemberResponse

@dynamic memberId;

typedef struct CreateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} CreateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberResponse_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberResponse__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberRequest

@implementation UpdateMemberRequest

@dynamic hasUpdate, update;
@dynamic hasUpdateSignature, updateSignature;

typedef struct UpdateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MemberUpdate *update;
  Signature *updateSignature;
} UpdateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "update",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberUpdate),
        .number = UpdateMemberRequest_FieldNumber_Update,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = UpdateMemberRequest_FieldNumber_UpdateSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, updateSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberResponse

@implementation UpdateMemberResponse

@dynamic hasMember, member;

typedef struct UpdateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} UpdateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = UpdateMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberRequest

@implementation GetMemberRequest


typedef struct GetMemberRequest__storage_ {
  uint32_t _has_storage_[1];
} GetMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberResponse

@implementation GetMemberResponse

@dynamic hasMember, member;

typedef struct GetMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} GetMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = GetMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AliasExistsRequest

@implementation AliasExistsRequest

@dynamic alias;

typedef struct AliasExistsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
} AliasExistsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = AliasExistsRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AliasExistsRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AliasExistsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AliasExistsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AliasExistsResponse

@implementation AliasExistsResponse

@dynamic exists;

typedef struct AliasExistsResponse__storage_ {
  uint32_t _has_storage_[1];
} AliasExistsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exists",
        .dataTypeSpecific.className = NULL,
        .number = AliasExistsResponse_FieldNumber_Exists,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AliasExistsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AliasExistsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressRequest

@implementation AddAddressRequest

@dynamic name;
@dynamic data_p;
@dynamic hasDataSignature, dataSignature;

typedef struct AddAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *data_p;
  Signature *dataSignature;
} AddAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddAddressRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = AddAddressRequest_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = AddAddressRequest_FieldNumber_DataSignature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, dataSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressResponse

@implementation AddAddressResponse

@dynamic hasAddress, address;

typedef struct AddAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  Address *address;
} AddAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressRequest

@implementation GetAddressRequest

@dynamic addressId;

typedef struct GetAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} GetAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressResponse

@implementation GetAddressResponse

@dynamic hasAddress, address;

typedef struct GetAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  Address *address;
} GetAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = GetAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesRequest

@implementation GetAddressesRequest


typedef struct GetAddressesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAddressesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAddressesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesResponse

@implementation GetAddressesResponse

@dynamic addressesArray, addressesArray_Count;

typedef struct GetAddressesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressesArray;
} GetAddressesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = GetAddressesResponse_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAddressesResponse__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressRequest

@implementation DeleteAddressRequest

@dynamic addressId;

typedef struct DeleteAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} DeleteAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressResponse

@implementation DeleteAddressResponse


typedef struct DeleteAddressResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeDeviceRequest

@implementation SubscribeDeviceRequest

@dynamic provider;
@dynamic notificationUri;
@dynamic platform;
@dynamic tagsArray, tagsArray_Count;

typedef struct SubscribeDeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  Platform platform;
  NSString *provider;
  NSString *notificationUri;
  NSMutableArray *tagsArray;
} SubscribeDeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDeviceRequest_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeDeviceRequest__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notificationUri",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDeviceRequest_FieldNumber_NotificationUri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeDeviceRequest__storage_, notificationUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Platform_EnumDescriptor,
        .number = SubscribeDeviceRequest_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeDeviceRequest__storage_, platform),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeDeviceRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SubscribeDeviceRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeDeviceRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeDeviceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SubscribeDeviceRequest_Platform_RawValue(SubscribeDeviceRequest *message) {
  GPBDescriptor *descriptor = [SubscribeDeviceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeDeviceRequest_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetSubscribeDeviceRequest_Platform_RawValue(SubscribeDeviceRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SubscribeDeviceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeDeviceRequest_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SubscribeDeviceResponse

@implementation SubscribeDeviceResponse


typedef struct SubscribeDeviceResponse__storage_ {
  uint32_t _has_storage_[1];
} SubscribeDeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeDeviceResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SubscribeDeviceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeDeviceRequest

@implementation UnsubscribeDeviceRequest

@dynamic provider;
@dynamic notificationUri;

typedef struct UnsubscribeDeviceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *provider;
  NSString *notificationUri;
} UnsubscribeDeviceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = UnsubscribeDeviceRequest_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnsubscribeDeviceRequest__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notificationUri",
        .dataTypeSpecific.className = NULL,
        .number = UnsubscribeDeviceRequest_FieldNumber_NotificationUri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnsubscribeDeviceRequest__storage_, notificationUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeDeviceRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnsubscribeDeviceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeDeviceResponse

@implementation UnsubscribeDeviceResponse


typedef struct UnsubscribeDeviceResponse__storage_ {
  uint32_t _has_storage_[1];
} UnsubscribeDeviceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeDeviceResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UnsubscribeDeviceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyLinkAccountsRequest

@implementation NotifyLinkAccountsRequest

@dynamic alias;
@dynamic bankId;
@dynamic accountsLinkPayload;

typedef struct NotifyLinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
  NSString *bankId;
  NSString *accountsLinkPayload;
} NotifyLinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsRequest_FieldNumber_BankId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsRequest__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsRequest_FieldNumber_AccountsLinkPayload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsRequest__storage_, accountsLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyLinkAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyLinkAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyLinkAccountsResponse

@implementation NotifyLinkAccountsResponse


typedef struct NotifyLinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
} NotifyLinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyLinkAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(NotifyLinkAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyAddKeyRequest

@implementation NotifyAddKeyRequest

@dynamic alias;
@dynamic publicKey;
@dynamic tagsArray, tagsArray_Count;

typedef struct NotifyAddKeyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
  NSString *publicKey;
  NSMutableArray *tagsArray;
} NotifyAddKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = NotifyAddKeyRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyAddKeyRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = NotifyAddKeyRequest_FieldNumber_PublicKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyAddKeyRequest__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = NotifyAddKeyRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyAddKeyRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyAddKeyRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyAddKeyRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyAddKeyResponse

@implementation NotifyAddKeyResponse


typedef struct NotifyAddKeyResponse__storage_ {
  uint32_t _has_storage_[1];
} NotifyAddKeyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyAddKeyResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(NotifyAddKeyResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyLinkAccountsAndAddKeyRequest

@implementation NotifyLinkAccountsAndAddKeyRequest

@dynamic alias;
@dynamic bankId;
@dynamic accountsLinkPayload;
@dynamic publicKey;
@dynamic tagsArray, tagsArray_Count;

typedef struct NotifyLinkAccountsAndAddKeyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
  NSString *bankId;
  NSString *accountsLinkPayload;
  NSString *publicKey;
  NSMutableArray *tagsArray;
} NotifyLinkAccountsAndAddKeyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsAndAddKeyRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsAndAddKeyRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsAndAddKeyRequest_FieldNumber_BankId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsAndAddKeyRequest__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsAndAddKeyRequest_FieldNumber_AccountsLinkPayload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsAndAddKeyRequest__storage_, accountsLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsAndAddKeyRequest_FieldNumber_PublicKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsAndAddKeyRequest__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = NotifyLinkAccountsAndAddKeyRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyLinkAccountsAndAddKeyRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyLinkAccountsAndAddKeyRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyLinkAccountsAndAddKeyRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyLinkAccountsAndAddKeyResponse

@implementation NotifyLinkAccountsAndAddKeyResponse


typedef struct NotifyLinkAccountsAndAddKeyResponse__storage_ {
  uint32_t _has_storage_[1];
} NotifyLinkAccountsAndAddKeyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyLinkAccountsAndAddKeyResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(NotifyLinkAccountsAndAddKeyResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsRequest

@implementation LinkAccountsRequest

@dynamic bankId;
@dynamic accountsLinkPayload;

typedef struct LinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *accountsLinkPayload;
} LinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccountsRequest_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccountsRequest__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccountsRequest_FieldNumber_AccountsLinkPayload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkAccountsRequest__storage_, accountsLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsResponse

@implementation LinkAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct LinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} LinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = LinkAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LinkAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountRequest

@implementation GetAccountRequest

@dynamic accountId;

typedef struct GetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetAccountRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountResponse

@implementation GetAccountResponse

@dynamic hasAccount, account;

typedef struct GetAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} GetAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsRequest

@implementation GetAccountsRequest


typedef struct GetAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsResponse

@implementation GetAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct GetAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} GetAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAccountNameRequest

@implementation SetAccountNameRequest

@dynamic accountId;
@dynamic name;

typedef struct SetAccountNameRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *name;
} SetAccountNameRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountNameRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAccountNameRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountNameRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetAccountNameRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAccountNameRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAccountNameRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAccountNameResponse

@implementation SetAccountNameResponse

@dynamic hasAccount, account;

typedef struct SetAccountNameResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} SetAccountNameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = SetAccountNameResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAccountNameResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAccountNameResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAccountNameResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceRequest

@implementation GetBalanceRequest

@dynamic accountId;

typedef struct GetBalanceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetBalanceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetBalanceRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceResponse

@implementation GetBalanceResponse

@dynamic hasCurrent, current;
@dynamic hasAvailable, available;

typedef struct GetBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  Money *current;
  Money *available;
} GetBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "current",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Current,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, current),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "available",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Available,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, available),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionRequest

@implementation GetTransactionRequest

@dynamic accountId;
@dynamic transactionId;

typedef struct GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *transactionId;
} GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_TransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionResponse

@implementation GetTransactionResponse

@dynamic hasTransaction, transaction;

typedef struct GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  Transaction *transaction;
} GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionResponse_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsRequest

@implementation GetTransactionsRequest

@dynamic accountId;
@dynamic offset;
@dynamic limit;

typedef struct GetTransactionsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
  NSString *accountId;
} GetTransactionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsResponse

@implementation GetTransactionsResponse

@dynamic transactionsArray, transactionsArray_Count;

typedef struct GetTransactionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
} GetTransactionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionsResponse_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePaymentTokenRequest

@implementation CreatePaymentTokenRequest

@dynamic hasPayload, payload;

typedef struct CreatePaymentTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  PaymentToken_Payload *payload;
} CreatePaymentTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken_Payload),
        .number = CreatePaymentTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePaymentTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePaymentTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePaymentTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePaymentTokenResponse

@implementation CreatePaymentTokenResponse

@dynamic hasToken, token;

typedef struct CreatePaymentTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  PaymentToken *token;
} CreatePaymentTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = CreatePaymentTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePaymentTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePaymentTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePaymentTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentTokenRequest

@implementation GetPaymentTokenRequest

@dynamic tokenId;

typedef struct GetPaymentTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} GetPaymentTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentTokenResponse

@implementation GetPaymentTokenResponse

@dynamic hasToken, token;

typedef struct GetPaymentTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  PaymentToken *token;
} GetPaymentTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = GetPaymentTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentTokensRequest

@implementation GetPaymentTokensRequest

@dynamic offset;
@dynamic limit;

typedef struct GetPaymentTokensRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
} GetPaymentTokensRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentTokensRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentTokensRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentTokensRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPaymentTokensRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentTokensRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentTokensRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentTokensResponse

@implementation GetPaymentTokensResponse

@dynamic tokensArray, tokensArray_Count;

typedef struct GetPaymentTokensResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tokensArray;
} GetPaymentTokensResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = GetPaymentTokensResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPaymentTokensResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentTokensResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentTokensResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorsePaymentTokenRequest

@implementation EndorsePaymentTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct EndorsePaymentTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} EndorsePaymentTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = EndorsePaymentTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorsePaymentTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = EndorsePaymentTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorsePaymentTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorsePaymentTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorsePaymentTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorsePaymentTokenResponse

@implementation EndorsePaymentTokenResponse

@dynamic hasToken, token;

typedef struct EndorsePaymentTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  PaymentToken *token;
} EndorsePaymentTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = EndorsePaymentTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorsePaymentTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorsePaymentTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorsePaymentTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelPaymentTokenRequest

@implementation CancelPaymentTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct CancelPaymentTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} CancelPaymentTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = CancelPaymentTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelPaymentTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CancelPaymentTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelPaymentTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelPaymentTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelPaymentTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelPaymentTokenResponse

@implementation CancelPaymentTokenResponse

@dynamic hasToken, token;

typedef struct CancelPaymentTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  PaymentToken *token;
} CancelPaymentTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentToken),
        .number = CancelPaymentTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelPaymentTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelPaymentTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelPaymentTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateAccessTokenRequest

@implementation CreateAccessTokenRequest

@dynamic hasPayload, payload;

typedef struct CreateAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  AccessToken_Payload *payload;
} CreateAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken_Payload),
        .number = CreateAccessTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAccessTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAccessTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAccessTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateAccessTokenResponse

@implementation CreateAccessTokenResponse

@dynamic hasToken, token;

typedef struct CreateAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  AccessToken *token;
} CreateAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = CreateAccessTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateAccessTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateAccessTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateAccessTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccessTokenRequest

@implementation GetAccessTokenRequest

@dynamic tokenId;

typedef struct GetAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} GetAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetAccessTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccessTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccessTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccessTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccessTokenResponse

@implementation GetAccessTokenResponse

@dynamic hasToken, token;

typedef struct GetAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  AccessToken *token;
} GetAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = GetAccessTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccessTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccessTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccessTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccessTokensRequest

@implementation GetAccessTokensRequest

@dynamic offset;
@dynamic limit;

typedef struct GetAccessTokensRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
} GetAccessTokensRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetAccessTokensRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccessTokensRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = GetAccessTokensRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetAccessTokensRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccessTokensRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccessTokensRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccessTokensResponse

@implementation GetAccessTokensResponse

@dynamic tokensArray, tokensArray_Count;

typedef struct GetAccessTokensResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tokensArray;
} GetAccessTokensResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = GetAccessTokensResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAccessTokensResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccessTokensResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccessTokensResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseAccessTokenRequest

@implementation EndorseAccessTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct EndorseAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} EndorseAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = EndorseAccessTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseAccessTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = EndorseAccessTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorseAccessTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseAccessTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseAccessTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseAccessTokenResponse

@implementation EndorseAccessTokenResponse

@dynamic hasToken, token;

typedef struct EndorseAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  AccessToken *token;
} EndorseAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = EndorseAccessTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseAccessTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseAccessTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseAccessTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelAccessTokenRequest

@implementation CancelAccessTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct CancelAccessTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} CancelAccessTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = CancelAccessTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelAccessTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CancelAccessTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelAccessTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelAccessTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelAccessTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelAccessTokenResponse

@implementation CancelAccessTokenResponse

@dynamic hasToken, token;

typedef struct CancelAccessTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  AccessToken *token;
} CancelAccessTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = CancelAccessTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelAccessTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelAccessTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelAccessTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedeemPaymentTokenRequest

@implementation RedeemPaymentTokenRequest

@dynamic hasPayload, payload;
@dynamic hasPayloadSignature, payloadSignature;

typedef struct RedeemPaymentTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  PaymentPayload *payload;
  Signature *payloadSignature;
} RedeemPaymentTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(PaymentPayload),
        .number = RedeemPaymentTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedeemPaymentTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payloadSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = RedeemPaymentTokenRequest_FieldNumber_PayloadSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RedeemPaymentTokenRequest__storage_, payloadSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedeemPaymentTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedeemPaymentTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedeemPaymentTokenResponse

@implementation RedeemPaymentTokenResponse

@dynamic hasPayment, payment;

typedef struct RedeemPaymentTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Payment *payment;
} RedeemPaymentTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payment",
        .dataTypeSpecific.className = GPBStringifySymbol(Payment),
        .number = RedeemPaymentTokenResponse_FieldNumber_Payment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedeemPaymentTokenResponse__storage_, payment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedeemPaymentTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedeemPaymentTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentRequest

@implementation GetPaymentRequest

@dynamic paymentId;

typedef struct GetPaymentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *paymentId;
} GetPaymentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentId",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentRequest_FieldNumber_PaymentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentRequest__storage_, paymentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentResponse

@implementation GetPaymentResponse

@dynamic hasPayment, payment;

typedef struct GetPaymentResponse__storage_ {
  uint32_t _has_storage_[1];
  Payment *payment;
} GetPaymentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payment",
        .dataTypeSpecific.className = GPBStringifySymbol(Payment),
        .number = GetPaymentResponse_FieldNumber_Payment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentResponse__storage_, payment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentsRequest

@implementation GetPaymentsRequest

@dynamic tokenId;
@dynamic offset;
@dynamic limit;

typedef struct GetPaymentsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
  NSString *tokenId;
} GetPaymentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentsRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPaymentsRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentsRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetPaymentsRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = GetPaymentsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetPaymentsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPaymentsResponse

@implementation GetPaymentsResponse

@dynamic paymentsArray, paymentsArray_Count;

typedef struct GetPaymentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *paymentsArray;
} GetPaymentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "paymentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Payment),
        .number = GetPaymentsResponse_FieldNumber_PaymentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetPaymentsResponse__storage_, paymentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPaymentsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPaymentsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
