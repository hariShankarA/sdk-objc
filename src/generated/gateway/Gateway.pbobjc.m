// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway/gateway.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "gateway/Gateway.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
 #import "Account.pbobjc.h"
 #import "Member.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Notification.pbobjc.h"
 #import "Security.pbobjc.h"
 #import "Paging.pbobjc.h"
 #import "Token.pbobjc.h"
 #import "Transaction.pbobjc.h"
 #import "Transfer.pbobjc.h"
 #import "Subscriber.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GatewayRoot

@implementation GatewayRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[AccountRoot extensionRegistry]];
    [registry addExtensions:[MemberRoot extensionRegistry]];
    [registry addExtensions:[MoneyRoot extensionRegistry]];
    [registry addExtensions:[NotificationRoot extensionRegistry]];
    [registry addExtensions:[SecurityRoot extensionRegistry]];
    [registry addExtensions:[PagingRoot extensionRegistry]];
    [registry addExtensions:[TokenRoot extensionRegistry]];
    [registry addExtensions:[TransactionRoot extensionRegistry]];
    [registry addExtensions:[TransferRoot extensionRegistry]];
    [registry addExtensions:[SubscriberRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GatewayRoot_FileDescriptor

static GPBFileDescriptor *GatewayRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.gateway"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CreateMemberRequest

@implementation CreateMemberRequest

@dynamic nonce;

typedef struct CreateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *nonce;
} CreateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberRequest_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberRequest__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateMemberResponse

@implementation CreateMemberResponse

@dynamic memberId;

typedef struct CreateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
} CreateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = CreateMemberResponse_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateMemberResponse__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberRequest

@implementation UpdateMemberRequest

@dynamic hasUpdate, update;
@dynamic hasUpdateSignature, updateSignature;

typedef struct UpdateMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MemberUpdate *update;
  Signature *updateSignature;
} UpdateMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "update",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberUpdate),
        .number = UpdateMemberRequest_FieldNumber_Update,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = UpdateMemberRequest_FieldNumber_UpdateSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMemberRequest__storage_, updateSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateMemberResponse

@implementation UpdateMemberResponse

@dynamic hasMember, member;

typedef struct UpdateMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} UpdateMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = UpdateMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberRequest

@implementation GetMemberRequest


typedef struct GetMemberRequest__storage_ {
  uint32_t _has_storage_[1];
} GetMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMemberResponse

@implementation GetMemberResponse

@dynamic hasMember, member;

typedef struct GetMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  Member *member;
} GetMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "member",
        .dataTypeSpecific.className = GPBStringifySymbol(Member),
        .number = GetMemberResponse_FieldNumber_Member,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMemberResponse__storage_, member),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMemberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AliasExistsRequest

@implementation AliasExistsRequest

@dynamic alias;

typedef struct AliasExistsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
} AliasExistsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = AliasExistsRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AliasExistsRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AliasExistsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AliasExistsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AliasExistsResponse

@implementation AliasExistsResponse

@dynamic exists;

typedef struct AliasExistsResponse__storage_ {
  uint32_t _has_storage_[1];
} AliasExistsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exists",
        .dataTypeSpecific.className = NULL,
        .number = AliasExistsResponse_FieldNumber_Exists,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AliasExistsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AliasExistsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressRequest

@implementation AddAddressRequest

@dynamic name;
@dynamic data_p;
@dynamic hasDataSignature, dataSignature;

typedef struct AddAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *data_p;
  Signature *dataSignature;
} AddAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddAddressRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = AddAddressRequest_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = AddAddressRequest_FieldNumber_DataSignature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddAddressRequest__storage_, dataSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddAddressResponse

@implementation AddAddressResponse

@dynamic hasAddress, address;

typedef struct AddAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  Address *address;
} AddAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressRequest

@implementation GetAddressRequest

@dynamic addressId;

typedef struct GetAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} GetAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = GetAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressResponse

@implementation GetAddressResponse

@dynamic hasAddress, address;

typedef struct GetAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  Address *address;
} GetAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = GetAddressResponse_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAddressResponse__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesRequest

@implementation GetAddressesRequest


typedef struct GetAddressesRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAddressesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAddressesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAddressesResponse

@implementation GetAddressesResponse

@dynamic addressesArray, addressesArray_Count;

typedef struct GetAddressesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *addressesArray;
} GetAddressesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = GetAddressesResponse_FieldNumber_AddressesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAddressesResponse__storage_, addressesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAddressesResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAddressesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressRequest

@implementation DeleteAddressRequest

@dynamic addressId;

typedef struct DeleteAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *addressId;
} DeleteAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteAddressRequest_FieldNumber_AddressId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteAddressRequest__storage_, addressId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteAddressRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteAddressResponse

@implementation DeleteAddressResponse


typedef struct DeleteAddressResponse__storage_ {
  uint32_t _has_storage_[1];
} DeleteAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteAddressResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DeleteAddressResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeToNotificationsRequest

@implementation SubscribeToNotificationsRequest

@dynamic provider;
@dynamic target;
@dynamic platform;

typedef struct SubscribeToNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  Platform platform;
  NSString *provider;
  NSString *target;
} SubscribeToNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeToNotificationsRequest_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsRequest__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeToNotificationsRequest_FieldNumber_Target,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsRequest__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Platform_EnumDescriptor,
        .number = SubscribeToNotificationsRequest_FieldNumber_Platform,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsRequest__storage_, platform),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeToNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeToNotificationsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SubscribeToNotificationsRequest_Platform_RawValue(SubscribeToNotificationsRequest *message) {
  GPBDescriptor *descriptor = [SubscribeToNotificationsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeToNotificationsRequest_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetSubscribeToNotificationsRequest_Platform_RawValue(SubscribeToNotificationsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SubscribeToNotificationsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeToNotificationsRequest_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SubscribeToNotificationsResponse

@implementation SubscribeToNotificationsResponse

@dynamic hasSubscriber, subscriber;

typedef struct SubscribeToNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  Subscriber *subscriber;
} SubscribeToNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriber",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = SubscribeToNotificationsResponse_FieldNumber_Subscriber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeToNotificationsResponse__storage_, subscriber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeToNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeToNotificationsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscribersRequest

@implementation GetSubscribersRequest


typedef struct GetSubscribersRequest__storage_ {
  uint32_t _has_storage_[1];
} GetSubscribersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscribersRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetSubscribersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscribersResponse

@implementation GetSubscribersResponse

@dynamic subscribersArray, subscribersArray_Count;

typedef struct GetSubscribersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *subscribersArray;
} GetSubscribersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscribersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = GetSubscribersResponse_FieldNumber_SubscribersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSubscribersResponse__storage_, subscribersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscribersResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscribersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscriberRequest

@implementation GetSubscriberRequest

@dynamic subscriberId;

typedef struct GetSubscriberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} GetSubscriberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = GetSubscriberRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSubscriberRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscriberRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscriberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSubscriberResponse

@implementation GetSubscriberResponse

@dynamic hasSubscriber, subscriber;

typedef struct GetSubscriberResponse__storage_ {
  uint32_t _has_storage_[1];
  Subscriber *subscriber;
} GetSubscriberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriber",
        .dataTypeSpecific.className = GPBStringifySymbol(Subscriber),
        .number = GetSubscriberResponse_FieldNumber_Subscriber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSubscriberResponse__storage_, subscriber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSubscriberResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSubscriberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeFromNotificationsRequest

@implementation UnsubscribeFromNotificationsRequest

@dynamic subscriberId;

typedef struct UnsubscribeFromNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriberId;
} UnsubscribeFromNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = UnsubscribeFromNotificationsRequest_FieldNumber_SubscriberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnsubscribeFromNotificationsRequest__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeFromNotificationsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnsubscribeFromNotificationsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnsubscribeFromNotificationsResponse

@implementation UnsubscribeFromNotificationsResponse


typedef struct UnsubscribeFromNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
} UnsubscribeFromNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnsubscribeFromNotificationsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(UnsubscribeFromNotificationsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyRequest

@implementation NotifyRequest

@dynamic alias;
@dynamic hasNotification, notification;

typedef struct NotifyRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
  Notification *notification;
} NotifyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = NotifyRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notification",
        .dataTypeSpecific.className = GPBStringifySymbol(Notification),
        .number = NotifyRequest_FieldNumber_Notification,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyRequest__storage_, notification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyResponse

@implementation NotifyResponse


typedef struct NotifyResponse__storage_ {
  uint32_t _has_storage_[1];
} NotifyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(NotifyResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsRequest

@implementation LinkAccountsRequest

@dynamic bankId;
@dynamic accountsLinkPayload;

typedef struct LinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *accountsLinkPayload;
} LinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccountsRequest_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccountsRequest__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccountsRequest_FieldNumber_AccountsLinkPayload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkAccountsRequest__storage_, accountsLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsResponse

@implementation LinkAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct LinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} LinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = LinkAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LinkAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountRequest

@implementation GetAccountRequest

@dynamic accountId;

typedef struct GetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetAccountRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountResponse

@implementation GetAccountResponse

@dynamic hasAccount, account;

typedef struct GetAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} GetAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsRequest

@implementation GetAccountsRequest


typedef struct GetAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
} GetAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GetAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetAccountsResponse

@implementation GetAccountsResponse

@dynamic accountsArray, accountsArray_Count;

typedef struct GetAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountsArray;
} GetAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = GetAccountsResponse_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetAccountsResponse__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetAccountsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAccountNameRequest

@implementation SetAccountNameRequest

@dynamic accountId;
@dynamic name;

typedef struct SetAccountNameRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *name;
} SetAccountNameRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountNameRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAccountNameRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SetAccountNameRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetAccountNameRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAccountNameRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAccountNameRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetAccountNameResponse

@implementation SetAccountNameResponse

@dynamic hasAccount, account;

typedef struct SetAccountNameResponse__storage_ {
  uint32_t _has_storage_[1];
  Account *account;
} SetAccountNameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(Account),
        .number = SetAccountNameResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetAccountNameResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetAccountNameResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetAccountNameResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceRequest

@implementation GetBalanceRequest

@dynamic accountId;

typedef struct GetBalanceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
} GetBalanceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetBalanceRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceResponse

@implementation GetBalanceResponse

@dynamic hasCurrent, current;
@dynamic hasAvailable, available;

typedef struct GetBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  Money *current;
  Money *available;
} GetBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "current",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Current,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, current),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "available",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Available,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, available),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionRequest

@implementation GetTransactionRequest

@dynamic accountId;
@dynamic transactionId;

typedef struct GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *transactionId;
} GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_TransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionResponse

@implementation GetTransactionResponse

@dynamic hasTransaction, transaction;

typedef struct GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  Transaction *transaction;
} GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionResponse_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsRequest

@implementation GetTransactionsRequest

@dynamic accountId;
@dynamic hasPage, page;

typedef struct GetTransactionsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  Page *page;
} GetTransactionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTransactionsRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsResponse

@implementation GetTransactionsResponse

@dynamic transactionsArray, transactionsArray_Count;
@dynamic offset;

typedef struct GetTransactionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
  NSString *offset;
} GetTransactionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionsResponse_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTokenRequest

@implementation CreateTokenRequest

@dynamic hasPayload, payload;

typedef struct CreateTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  TokenPayload *payload;
} CreateTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(TokenPayload),
        .number = CreateTokenRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTokenRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTokenResponse

@implementation CreateTokenResponse

@dynamic hasToken, token;

typedef struct CreateTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} CreateTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = CreateTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenRequest

@implementation GetTokenRequest

@dynamic tokenId;

typedef struct GetTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} GetTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokenResponse

@implementation GetTokenResponse

@dynamic hasToken, token;

typedef struct GetTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} GetTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = GetTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTokensRequest

@implementation GetTokensRequest

@dynamic type;
@dynamic hasPage, page;

typedef struct GetTokensRequest__storage_ {
  uint32_t _has_storage_[1];
  GetTokensRequest_Type type;
  Page *page;
} GetTokensRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GetTokensRequest_Type_EnumDescriptor,
        .number = GetTokensRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokensRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTokensRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTokensRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokensRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokensRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetTokensRequest_Type_RawValue(GetTokensRequest *message) {
  GPBDescriptor *descriptor = [GetTokensRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetTokensRequest_Type_RawValue(GetTokensRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [GetTokensRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetTokensRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GetTokensRequest_Type

GPBEnumDescriptor *GetTokensRequest_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Access\000Transfer\000";
    static const int32_t values[] = {
        GetTokensRequest_Type_Invalid,
        GetTokensRequest_Type_Access,
        GetTokensRequest_Type_Transfer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GetTokensRequest_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GetTokensRequest_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GetTokensRequest_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case GetTokensRequest_Type_Invalid:
    case GetTokensRequest_Type_Access:
    case GetTokensRequest_Type_Transfer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetTokensResponse

@implementation GetTokensResponse

@dynamic tokensArray, tokensArray_Count;
@dynamic offset;

typedef struct GetTokensResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tokensArray;
  NSString *offset;
} GetTokensResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = GetTokensResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTokensResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTokensResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTokensResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTokensResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTokensResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseTokenRequest

@implementation EndorseTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct EndorseTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} EndorseTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = EndorseTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = EndorseTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EndorseTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndorseTokenResponse

@implementation EndorseTokenResponse

@dynamic hasToken, token;

typedef struct EndorseTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} EndorseTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = EndorseTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndorseTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EndorseTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndorseTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelTokenRequest

@implementation CancelTokenRequest

@dynamic tokenId;
@dynamic hasSignature, signature;

typedef struct CancelTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Signature *signature;
} CancelTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = CancelTokenRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelTokenRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CancelTokenRequest_FieldNumber_Signature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelTokenRequest__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelTokenRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelTokenResponse

@implementation CancelTokenResponse

@dynamic hasToken, token;

typedef struct CancelTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
} CancelTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = CancelTokenResponse_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelTokenResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferRequest

@implementation CreateTransferRequest

@dynamic hasPayload, payload;
@dynamic hasPayloadSignature, payloadSignature;

typedef struct CreateTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  Transfer_Payload *payload;
  Signature *payloadSignature;
} CreateTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer_Payload),
        .number = CreateTransferRequest_FieldNumber_Payload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferRequest__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payloadSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = CreateTransferRequest_FieldNumber_PayloadSignature,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateTransferRequest__storage_, payloadSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateTransferResponse

@implementation CreateTransferResponse

@dynamic hasTransfer, transfer;

typedef struct CreateTransferResponse__storage_ {
  uint32_t _has_storage_[1];
  Transfer *transfer;
} CreateTransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = CreateTransferResponse_FieldNumber_Transfer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateTransferResponse__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateTransferResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateTransferResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransferRequest

@implementation GetTransferRequest

@dynamic transferId;

typedef struct GetTransferRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} GetTransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransferRequest_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransferRequest__storage_, transferId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransferRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransferRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransferResponse

@implementation GetTransferResponse

@dynamic hasTransfer, transfer;

typedef struct GetTransferResponse__storage_ {
  uint32_t _has_storage_[1];
  Transfer *transfer;
} GetTransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = GetTransferResponse_FieldNumber_Transfer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransferResponse__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransferResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransferResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransfersRequest

@implementation GetTransfersRequest

@dynamic tokenId;
@dynamic hasPage, page;

typedef struct GetTransfersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
  Page *page;
} GetTransfersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersRequest_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransfersRequest__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(Page),
        .number = GetTransfersRequest_FieldNumber_Page,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransfersRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransfersRequest class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransfersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransfersResponse

@implementation GetTransfersResponse

@dynamic transfersArray, transfersArray_Count;
@dynamic offset;

typedef struct GetTransfersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transfersArray;
  NSString *offset;
} GetTransfersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transfersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = GetTransfersResponse_FieldNumber_TransfersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransfersResponse__storage_, transfersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransfersResponse_FieldNumber_Offset,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransfersResponse__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransfersResponse class]
                                     rootClass:[GatewayRoot class]
                                          file:GatewayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransfersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
