// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: member.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Member.pbobjc.h"
 #import "Address.pbobjc.h"
 #import "Security.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - MemberRoot

@implementation MemberRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MemberRoot_FileDescriptor

static GPBFileDescriptor *MemberRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.member"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MemberAddKeyOperation

@implementation MemberAddKeyOperation

@dynamic hasKey, key;

typedef struct MemberAddKeyOperation__storage_ {
  uint32_t _has_storage_[1];
  Key *key;
} MemberAddKeyOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = GPBStringifySymbol(Key),
        .number = MemberAddKeyOperation_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemberAddKeyOperation__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemberAddKeyOperation class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberAddKeyOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemberRemoveKeyOperation

@implementation MemberRemoveKeyOperation

@dynamic keyId;

typedef struct MemberRemoveKeyOperation__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyId;
} MemberRemoveKeyOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyId",
        .dataTypeSpecific.className = NULL,
        .number = MemberRemoveKeyOperation_FieldNumber_KeyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemberRemoveKeyOperation__storage_, keyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemberRemoveKeyOperation class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberRemoveKeyOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemberUsernameOperation

@implementation MemberUsernameOperation

@dynamic username;

typedef struct MemberUsernameOperation__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
} MemberUsernameOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = MemberUsernameOperation_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemberUsernameOperation__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemberUsernameOperation class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberUsernameOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemberOperation

@implementation MemberOperation

@dynamic operationOneOfCase;
@dynamic addKey;
@dynamic removeKey;
@dynamic addUsername;
@dynamic removeUsername;

typedef struct MemberOperation__storage_ {
  uint32_t _has_storage_[2];
  MemberAddKeyOperation *addKey;
  MemberRemoveKeyOperation *removeKey;
  MemberUsernameOperation *addUsername;
  MemberUsernameOperation *removeUsername;
} MemberOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addKey",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberAddKeyOperation),
        .number = MemberOperation_FieldNumber_AddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MemberOperation__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "removeKey",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberRemoveKeyOperation),
        .number = MemberOperation_FieldNumber_RemoveKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MemberOperation__storage_, removeKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addUsername",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberUsernameOperation),
        .number = MemberOperation_FieldNumber_AddUsername,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MemberOperation__storage_, addUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "removeUsername",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberUsernameOperation),
        .number = MemberOperation_FieldNumber_RemoveUsername,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MemberOperation__storage_, removeUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemberOperation class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "operation",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void MemberOperation_ClearOperationOneOfCase(MemberOperation *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - MemberUpdate

@implementation MemberUpdate

@dynamic prevHash;
@dynamic memberId;
@dynamic operationsArray, operationsArray_Count;

typedef struct MemberUpdate__storage_ {
  uint32_t _has_storage_[1];
  NSString *prevHash;
  NSString *memberId;
  NSMutableArray *operationsArray;
} MemberUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prevHash",
        .dataTypeSpecific.className = NULL,
        .number = MemberUpdate_FieldNumber_PrevHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemberUpdate__storage_, prevHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = MemberUpdate_FieldNumber_MemberId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemberUpdate__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "operationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MemberOperation),
        .number = MemberUpdate_FieldNumber_OperationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MemberUpdate__storage_, operationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemberUpdate class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemberUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Member

@implementation Member

@dynamic id_p;
@dynamic lastHash;
@dynamic usernamesArray, usernamesArray_Count;
@dynamic keysArray, keysArray_Count;

typedef struct Member__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *lastHash;
  NSMutableArray *usernamesArray;
  NSMutableArray *keysArray;
} Member__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Member_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Member__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastHash",
        .dataTypeSpecific.className = NULL,
        .number = Member_FieldNumber_LastHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Member__storage_, lastHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usernamesArray",
        .dataTypeSpecific.className = NULL,
        .number = Member_FieldNumber_UsernamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Member__storage_, usernamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Key),
        .number = Member_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Member__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Member class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Member__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddressRecord

@implementation AddressRecord

@dynamic id_p;
@dynamic name;
@dynamic hasAddress, address;
@dynamic hasAddressSignature, addressSignature;

typedef struct AddressRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  Address *address;
  Signature *addressSignature;
} AddressRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AddressRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddressRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddressRecord_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddressRecord__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddressRecord_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddressRecord__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addressSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(Signature),
        .number = AddressRecord_FieldNumber_AddressSignature,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddressRecord__storage_, addressSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddressRecord class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddressRecord__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Profile

@implementation Profile

@dynamic displayNameFirst;
@dynamic displayNameLast;

typedef struct Profile__storage_ {
  uint32_t _has_storage_[1];
  NSString *displayNameFirst;
  NSString *displayNameLast;
} Profile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "displayNameFirst",
        .dataTypeSpecific.className = NULL,
        .number = Profile_FieldNumber_DisplayNameFirst,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Profile__storage_, displayNameFirst),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayNameLast",
        .dataTypeSpecific.className = NULL,
        .number = Profile_FieldNumber_DisplayNameLast,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Profile__storage_, displayNameLast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Profile class]
                                     rootClass:[MemberRoot class]
                                          file:MemberRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Profile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
