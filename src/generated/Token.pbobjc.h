// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DoubleRange;
@class InformationToken;
@class InformationTokenAcl;
@class PaymentToken;
@class Signature;
@class TimePeriod;
@class TokenMember;
@class TokenSignature;
@class Transfer;
@class Var;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum TokenSignature_Action

/// List of valid actions that one can perform on the Token. We use lowercase string value
/// of the action when computing a signature.
typedef GPB_ENUM(TokenSignature_Action) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  TokenSignature_Action_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  TokenSignature_Action_Invalid = 0,

  /// Endorses token. Both payer and payer bank co-endorse the token.
  TokenSignature_Action_Endorsed = 1,

  /// Declines the token, executed by payer or issuer.
  TokenSignature_Action_Declined = 2,

  /// Revokes the token, executed by payer.
  TokenSignature_Action_Revoked = 3,
};

GPBEnumDescriptor *TokenSignature_Action_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL TokenSignature_Action_IsValidValue(int32_t value);

#pragma mark - Enum InformationTokenAcl_HttpMethod

typedef GPB_ENUM(InformationTokenAcl_HttpMethod) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  InformationTokenAcl_HttpMethod_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  InformationTokenAcl_HttpMethod_Invalid = 0,
  InformationTokenAcl_HttpMethod_Get = 1,
  InformationTokenAcl_HttpMethod_Put = 2,
  InformationTokenAcl_HttpMethod_Post = 3,
  InformationTokenAcl_HttpMethod_Delete = 4,
};

GPBEnumDescriptor *InformationTokenAcl_HttpMethod_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL InformationTokenAcl_HttpMethod_IsValidValue(int32_t value);

#pragma mark - TokenRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface TokenRoot : GPBRootObject
@end

#pragma mark - Token

typedef GPB_ENUM(Token_FieldNumber) {
  Token_FieldNumber_Id_p = 1,
  Token_FieldNumber_Payment = 2,
  Token_FieldNumber_Information = 3,
  Token_FieldNumber_SignaturesArray = 4,
};

typedef GPB_ENUM(Token_Token_OneOfCase) {
  Token_Token_OneOfCase_GPBUnsetOneOfCase = 0,
  Token_Token_OneOfCase_Payment = 2,
  Token_Token_OneOfCase_Information = 3,
};

@interface Token : GPBMessage

/// Computed as sha(token).
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readonly) Token_Token_OneOfCase tokenOneOfCase;

/// Only used for payment token.
@property(nonatomic, readwrite, strong, null_resettable) PaymentToken *payment;

/// Only used for information token.
@property(nonatomic, readwrite, strong, null_resettable) InformationToken *information;

/// Token signatures.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TokenSignature*> *signaturesArray;
/// The number of items in @c signaturesArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger signaturesArray_Count;

@end

/// Clears whatever value was set for the oneof 'token'.
void Token_ClearTokenOneOfCase(Token *message);

#pragma mark - TokenSignature

typedef GPB_ENUM(TokenSignature_FieldNumber) {
  TokenSignature_FieldNumber_Action = 1,
  TokenSignature_FieldNumber_Signature = 2,
};

@interface TokenSignature : GPBMessage

@property(nonatomic, readwrite) TokenSignature_Action action;

@property(nonatomic, readwrite, strong, null_resettable) Signature *signature;
/// Test to see if @c signature has been set.
@property(nonatomic, readwrite) BOOL hasSignature;

@end

/// Fetches the raw value of a @c TokenSignature's @c action property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t TokenSignature_Action_RawValue(TokenSignature *message);
/// Sets the raw value of an @c TokenSignature's @c action property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetTokenSignature_Action_RawValue(TokenSignature *message, int32_t value);

#pragma mark - PaymentToken

typedef GPB_ENUM(PaymentToken_FieldNumber) {
  PaymentToken_FieldNumber_Scheme = 1,
  PaymentToken_FieldNumber_Nonce = 2,
  PaymentToken_FieldNumber_Issuer = 3,
  PaymentToken_FieldNumber_Payer = 4,
  PaymentToken_FieldNumber_Redeemer = 5,
  PaymentToken_FieldNumber_Transfer = 6,
  PaymentToken_FieldNumber_FeesPaidBy = 7,
  PaymentToken_FieldNumber_Currency = 8,
  PaymentToken_FieldNumber_LifetimeAmount = 9,
  PaymentToken_FieldNumber_Amount = 10,
  PaymentToken_FieldNumber_EffectiveAtMs = 11,
  PaymentToken_FieldNumber_ExpiresAtMs = 12,
  PaymentToken_FieldNumber_Description_p = 13,
  PaymentToken_FieldNumber_Vars = 14,
};

@interface PaymentToken : GPBMessage

/// Pay/1.0
@property(nonatomic, readwrite, copy, null_resettable) NSString *scheme;

/// nonce, random string used to de-dupe tokens, set by client.
@property(nonatomic, readwrite, copy, null_resettable) NSString *nonce;

/// Token issuer, bank.
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *issuer;
/// Test to see if @c issuer has been set.
@property(nonatomic, readwrite) BOOL hasIssuer;

/// Payer member.
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *payer;
/// Test to see if @c payer has been set.
@property(nonatomic, readwrite) BOOL hasPayer;

/// Redeemer member.
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *redeemer;
/// Test to see if @c redeemer has been set.
@property(nonatomic, readwrite) BOOL hasRedeemer;

/// Transfer instructions.
@property(nonatomic, readwrite, strong, null_resettable) Transfer *transfer;
/// Test to see if @c transfer has been set.
@property(nonatomic, readwrite) BOOL hasTransfer;

/// Payer or redeemer member id.
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *feesPaidBy;
/// Test to see if @c feesPaidBy has been set.
@property(nonatomic, readwrite) BOOL hasFeesPaidBy;

/// Optional: ISO4217, 3 letter currency code such as "USD" or "EUR".
@property(nonatomic, readwrite, copy, null_resettable) NSString *currency;

/// Optional: Token total lifetime amount. Double.
@property(nonatomic, readwrite, copy, null_resettable) NSString *lifetimeAmount;

/// Optional: Single token charge request acceptable range. Double.
@property(nonatomic, readwrite, copy, null_resettable) NSString *amount;

/// Optional
@property(nonatomic, readwrite) int64_t effectiveAtMs;

/// Optional
@property(nonatomic, readwrite) int64_t expiresAtMs;

/// Optional
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/// Optional: token variables.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, Var*> *vars;
/// The number of items in @c vars without causing the array to be created.
@property(nonatomic, readonly) NSUInteger vars_Count;

@end

#pragma mark - TokenMember

typedef GPB_ENUM(TokenMember_FieldNumber) {
  TokenMember_FieldNumber_Id_p = 1,
  TokenMember_FieldNumber_Alias = 2,
  TokenMember_FieldNumber_Name = 3,
};

@interface TokenMember : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *alias;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - Var

typedef GPB_ENUM(Var_FieldNumber) {
  Var_FieldNumber_Range = 1,
  Var_FieldNumber_OneOfArray = 2,
  Var_FieldNumber_Regex = 3,
  Var_FieldNumber_Value = 4,
  Var_FieldNumber_Period = 5,
};

/// Describes a single variable value. Only one of the fields is set.
@interface Var : GPBMessage

/// Used to represent amount range.
@property(nonatomic, readwrite, strong, null_resettable) DoubleRange *range;
/// Test to see if @c range has been set.
@property(nonatomic, readwrite) BOOL hasRange;

/// An array of strings a value must belong to.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *oneOfArray;
/// The number of items in @c oneOfArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger oneOfArray_Count;

/// Regex match.
@property(nonatomic, readwrite, copy, null_resettable) NSString *regex;

/// Plain string value.
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

/// Amount per time period.
@property(nonatomic, readwrite, strong, null_resettable) TimePeriod *period;
/// Test to see if @c period has been set.
@property(nonatomic, readwrite) BOOL hasPeriod;

@end

#pragma mark - DoubleRange

typedef GPB_ENUM(DoubleRange_FieldNumber) {
  DoubleRange_FieldNumber_Min = 1,
  DoubleRange_FieldNumber_Max = 2,
  DoubleRange_FieldNumber_Default_p = 3,
};

/// A range of a double value, used for amounts. The doubles are sent as strings over the wire.
@interface DoubleRange : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *min;

@property(nonatomic, readwrite, copy, null_resettable) NSString *max;

@property(nonatomic, readwrite, copy, null_resettable) NSString *default_p;

@end

#pragma mark - TimePeriod

typedef GPB_ENUM(TimePeriod_FieldNumber) {
  TimePeriod_FieldNumber_Duration = 1,
  TimePeriod_FieldNumber_Max = 2,
};

/// Time period description for multi use payment tokens.
@interface TimePeriod : GPBMessage

/// ISO8601 duration. E.g.: P1M for 1 month.
@property(nonatomic, readwrite, copy, null_resettable) NSString *duration;

/// Max amount for the given duration.
@property(nonatomic, readwrite, copy, null_resettable) NSString *max;

@end

#pragma mark - InformationToken

typedef GPB_ENUM(InformationToken_FieldNumber) {
  InformationToken_FieldNumber_Scheme = 1,
  InformationToken_FieldNumber_Nonce = 2,
  InformationToken_FieldNumber_Member = 3,
  InformationToken_FieldNumber_Redeemer = 4,
  InformationToken_FieldNumber_AclArray = 5,
  InformationToken_FieldNumber_EffectiveAtMs = 6,
  InformationToken_FieldNumber_ExpiresAtMs = 7,
  InformationToken_FieldNumber_Description_p = 8,
};

@interface InformationToken : GPBMessage

/// Info/1.0
@property(nonatomic, readwrite, copy, null_resettable) NSString *scheme;

/// nonce, random string used to de-dupe tokens, set by client.
@property(nonatomic, readwrite, copy, null_resettable) NSString *nonce;

/// member_id/optional[FriendlyName]
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *member;
/// Test to see if @c member has been set.
@property(nonatomic, readwrite) BOOL hasMember;

/// member_id/optional[FriendlyName]
@property(nonatomic, readwrite, strong, null_resettable) TokenMember *redeemer;
/// Test to see if @c redeemer has been set.
@property(nonatomic, readwrite) BOOL hasRedeemer;

/// Each entry defines information to a given API call (or many calls).
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InformationTokenAcl*> *aclArray;
/// The number of items in @c aclArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger aclArray_Count;

/// Optional
@property(nonatomic, readwrite) int64_t effectiveAtMs;

/// Optional
@property(nonatomic, readwrite) int64_t expiresAtMs;

/// Optional
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@end

#pragma mark - InformationTokenAcl

typedef GPB_ENUM(InformationTokenAcl_FieldNumber) {
  InformationTokenAcl_FieldNumber_Method = 1,
  InformationTokenAcl_FieldNumber_Uri = 2,
  InformationTokenAcl_FieldNumber_Query = 3,
  InformationTokenAcl_FieldNumber_FieldsArray = 4,
};

@interface InformationTokenAcl : GPBMessage

/// HTTP method.
@property(nonatomic, readwrite) InformationTokenAcl_HttpMethod method;

/// Optional: URI, any URI if not specified.
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/// Optional: URI query, any query if not specified.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *query;
/// The number of items in @c query without causing the array to be created.
@property(nonatomic, readonly) NSUInteger query_Count;

/// Optional: Filters down returned fields.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *fieldsArray;
/// The number of items in @c fieldsArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger fieldsArray_Count;

@end

/// Fetches the raw value of a @c InformationTokenAcl's @c method property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t InformationTokenAcl_Method_RawValue(InformationTokenAcl *message);
/// Sets the raw value of an @c InformationTokenAcl's @c method property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetInformationTokenAcl_Method_RawValue(InformationTokenAcl *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
