// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transferinstructions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Transferinstructions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TransferinstructionsRoot

@implementation TransferinstructionsRoot

@end

#pragma mark - TransferinstructionsRoot_FileDescriptor

static GPBFileDescriptor *TransferinstructionsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.transferinstructions"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TransferInstructions

@implementation TransferInstructions

@dynamic hasSource, source;
@dynamic destinationsArray, destinationsArray_Count;

typedef struct TransferInstructions__storage_ {
  uint32_t _has_storage_[1];
  Source *source;
  NSMutableArray *destinationsArray;
} TransferInstructions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "source",
        .dataTypeSpecific.className = GPBStringifySymbol(Source),
        .number = TransferInstructions_FieldNumber_Source,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "destinationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Destination),
        .number = TransferInstructions_FieldNumber_DestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TransferInstructions__storage_, destinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferInstructions class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferInstructions__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Source

@implementation Source

@dynamic accountId;
@dynamic accountNumber;

typedef struct Source__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *accountNumber;
} Source__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = Source_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Source__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = Source_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Source__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Source class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Source__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Destination

@implementation Destination

@dynamic destinationOneOfCase;
@dynamic swift;
@dynamic iban;
@dynamic ach;
@dynamic local;

typedef struct Destination__storage_ {
  uint32_t _has_storage_[2];
  DestinationBic *swift;
  DestinationIban *iban;
  DestinationAch *ach;
  DestinationLocal *local;
} Destination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "swift",
        .dataTypeSpecific.className = GPBStringifySymbol(DestinationBic),
        .number = Destination_FieldNumber_Swift,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Destination__storage_, swift),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "iban",
        .dataTypeSpecific.className = GPBStringifySymbol(DestinationIban),
        .number = Destination_FieldNumber_Iban,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Destination__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ach",
        .dataTypeSpecific.className = GPBStringifySymbol(DestinationAch),
        .number = Destination_FieldNumber_Ach,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Destination__storage_, ach),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "local",
        .dataTypeSpecific.className = GPBStringifySymbol(DestinationLocal),
        .number = Destination_FieldNumber_Local,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Destination__storage_, local),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Destination class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Destination__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "destination",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Destination_ClearDestinationOneOfCase(Destination *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DestinationBic

@implementation DestinationBic

@dynamic bic;
@dynamic account;

typedef struct DestinationBic__storage_ {
  uint32_t _has_storage_[1];
  NSString *bic;
  NSString *account;
} DestinationBic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bic",
        .dataTypeSpecific.className = NULL,
        .number = DestinationBic_FieldNumber_Bic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DestinationBic__storage_, bic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = DestinationBic_FieldNumber_Account,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DestinationBic__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DestinationBic class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DestinationBic__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DestinationIban

@implementation DestinationIban

@dynamic method;
@dynamic iban;
@dynamic name;

typedef struct DestinationIban__storage_ {
  uint32_t _has_storage_[1];
  DestinationIban_Method method;
  NSString *iban;
  NSString *name;
} DestinationIban__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = DestinationIban_Method_EnumDescriptor,
        .number = DestinationIban_FieldNumber_Method,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DestinationIban__storage_, method),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "iban",
        .dataTypeSpecific.className = NULL,
        .number = DestinationIban_FieldNumber_Iban,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DestinationIban__storage_, iban),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DestinationIban_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DestinationIban__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DestinationIban class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DestinationIban__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DestinationIban_Method_RawValue(DestinationIban *message) {
  GPBDescriptor *descriptor = [DestinationIban descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DestinationIban_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetDestinationIban_Method_RawValue(DestinationIban *message, int32_t value) {
  GPBDescriptor *descriptor = [DestinationIban descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DestinationIban_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DestinationIban_Method

GPBEnumDescriptor *DestinationIban_Method_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Swift\000Sepa\000";
    static const int32_t values[] = {
        DestinationIban_Method_Invalid,
        DestinationIban_Method_Swift,
        DestinationIban_Method_Sepa,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DestinationIban_Method)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DestinationIban_Method_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DestinationIban_Method_IsValidValue(int32_t value__) {
  switch (value__) {
    case DestinationIban_Method_Invalid:
    case DestinationIban_Method_Swift:
    case DestinationIban_Method_Sepa:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DestinationAch

@implementation DestinationAch

@dynamic routing;
@dynamic account;

typedef struct DestinationAch__storage_ {
  uint32_t _has_storage_[1];
  NSString *routing;
  NSString *account;
} DestinationAch__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "routing",
        .dataTypeSpecific.className = NULL,
        .number = DestinationAch_FieldNumber_Routing,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DestinationAch__storage_, routing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "account",
        .dataTypeSpecific.className = NULL,
        .number = DestinationAch_FieldNumber_Account,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DestinationAch__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DestinationAch class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DestinationAch__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DestinationLocal

@implementation DestinationLocal

@dynamic accountId;
@dynamic accountNumber;

typedef struct DestinationLocal__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountId;
  NSString *accountNumber;
} DestinationLocal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountId",
        .dataTypeSpecific.className = NULL,
        .number = DestinationLocal_FieldNumber_AccountId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DestinationLocal__storage_, accountId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = DestinationLocal_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DestinationLocal__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DestinationLocal class]
                                     rootClass:[TransferinstructionsRoot class]
                                          file:TransferinstructionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DestinationLocal__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
