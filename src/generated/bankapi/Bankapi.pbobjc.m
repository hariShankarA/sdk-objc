// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankapi/bankapi.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
#endif

 #import "bankapi/Bankapi.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Transaction.pbobjc.h"
 #import "Transfer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BankapiRoot

@implementation BankapiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBAnyRoot extensionRegistry]];
    [registry addExtensions:[MoneyRoot extensionRegistry]];
    [registry addExtensions:[TransactionRoot extensionRegistry]];
    [registry addExtensions:[TransferRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - BankapiRoot_FileDescriptor

static GPBFileDescriptor *BankapiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.bankapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TransferRequest

@implementation TransferRequest

@dynamic tokenTransactionId;
@dynamic hasAmount, amount;
@dynamic hasTransfer, transfer;

typedef struct TransferRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenTransactionId;
  Money *amount;
  Transfer *transfer;
} TransferRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenTransactionId",
        .dataTypeSpecific.className = NULL,
        .number = TransferRequest_FieldNumber_TokenTransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, tokenTransactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = TransferRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transfer",
        .dataTypeSpecific.className = GPBStringifySymbol(Transfer),
        .number = TransferRequest_FieldNumber_Transfer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferRequest__storage_, transfer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferResponse

@implementation TransferResponse

@dynamic bankTransactionId;
@dynamic status;
@dynamic statusDescription;

typedef struct TransferResponse__storage_ {
  uint32_t _has_storage_[1];
  TransactionStatus status;
  NSString *bankTransactionId;
  NSString *statusDescription;
} TransferResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankTransactionId",
        .dataTypeSpecific.className = NULL,
        .number = TransferResponse_FieldNumber_BankTransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferResponse__storage_, bankTransactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = TransactionStatus_EnumDescriptor,
        .number = TransferResponse_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferResponse__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "statusDescription",
        .dataTypeSpecific.className = NULL,
        .number = TransferResponse_FieldNumber_StatusDescription,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferResponse__storage_, statusDescription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TransferResponse_Status_RawValue(TransferResponse *message) {
  GPBDescriptor *descriptor = [TransferResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferResponse_Status_RawValue(TransferResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GetTransactionRequest

@implementation GetTransactionRequest

@dynamic accountNumber;
@dynamic bankTransactionId;

typedef struct GetTransactionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
  NSString *bankTransactionId;
} GetTransactionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankTransactionId",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionRequest_FieldNumber_BankTransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionRequest__storage_, bankTransactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionResponse

@implementation GetTransactionResponse

@dynamic hasTransaction, transaction;

typedef struct GetTransactionResponse__storage_ {
  uint32_t _has_storage_[1];
  Transaction *transaction;
} GetTransactionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionResponse_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionResponse__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsRequest

@implementation GetTransactionsRequest

@dynamic accountNumber;
@dynamic offset;
@dynamic limit;

typedef struct GetTransactionsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t limit;
  NSString *accountNumber;
} GetTransactionsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = GetTransactionsRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetTransactionsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetTransactionsResponse

@implementation GetTransactionsResponse

@dynamic transactionsArray, transactionsArray_Count;

typedef struct GetTransactionsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *transactionsArray;
} GetTransactionsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Transaction),
        .number = GetTransactionsResponse_FieldNumber_TransactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetTransactionsResponse__storage_, transactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetTransactionsResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetTransactionsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceRequest

@implementation GetBalanceRequest

@dynamic accountNumber;

typedef struct GetBalanceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *accountNumber;
} GetBalanceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = GetBalanceRequest_FieldNumber_AccountNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceRequest__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBalanceResponse

@implementation GetBalanceResponse

@dynamic hasCurrent, current;
@dynamic hasAvailable, available;

typedef struct GetBalanceResponse__storage_ {
  uint32_t _has_storage_[1];
  Money *current;
  Money *available;
} GetBalanceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "current",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Current,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, current),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "available",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = GetBalanceResponse_FieldNumber_Available,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetBalanceResponse__storage_, available),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBalanceResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBalanceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StartLinkBankRequest

@implementation StartLinkBankRequest

@dynamic alias;
@dynamic secret;
@dynamic accountsArray, accountsArray_Count;
@dynamic hasMetadata, metadata;

typedef struct StartLinkBankRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *alias;
  NSString *secret;
  NSMutableArray *accountsArray;
  GPBAny *metadata;
} StartLinkBankRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alias",
        .dataTypeSpecific.className = NULL,
        .number = StartLinkBankRequest_FieldNumber_Alias,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StartLinkBankRequest__storage_, alias),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.className = NULL,
        .number = StartLinkBankRequest_FieldNumber_Secret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StartLinkBankRequest__storage_, secret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = NULL,
        .number = StartLinkBankRequest_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StartLinkBankRequest__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = StartLinkBankRequest_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StartLinkBankRequest__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StartLinkBankRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StartLinkBankRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StartLinkBankResponse

@implementation StartLinkBankResponse

@dynamic accountLinkPayload;

typedef struct StartLinkBankResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *accountLinkPayload;
} StartLinkBankResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = StartLinkBankResponse_FieldNumber_AccountLinkPayload,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StartLinkBankResponse__storage_, accountLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StartLinkBankResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StartLinkBankResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetValueRequest

@implementation SetValueRequest

@dynamic key;
@dynamic hasValue, value;

typedef struct SetValueRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  GPBAny *value;
} SetValueRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = SetValueRequest_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetValueRequest__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = SetValueRequest_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SetValueRequest__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetValueRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetValueRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SetValueResponse

@implementation SetValueResponse

@dynamic hasPrevious, previous;

typedef struct SetValueResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *previous;
} SetValueResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "previous",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = SetValueResponse_FieldNumber_Previous,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SetValueResponse__storage_, previous),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SetValueResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SetValueResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetValueRequest

@implementation GetValueRequest

@dynamic key;

typedef struct GetValueRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
} GetValueRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = GetValueRequest_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetValueRequest__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetValueRequest class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetValueRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetValueResponse

@implementation GetValueResponse

@dynamic hasValue, value;

typedef struct GetValueResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *value;
} GetValueResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = GetValueResponse_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetValueResponse__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetValueResponse class]
                                     rootClass:[BankapiRoot class]
                                          file:BankapiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetValueResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
