// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankapi/fank.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "bankapi/Fank.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
 #import "Money.pbobjc.h"
 #import "Banklink.pbobjc.h"
 #import "Security.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FankFankRoot

@implementation FankFankRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[MoneyRoot extensionRegistry]];
    [registry addExtensions:[BanklinkRoot extensionRegistry]];
    [registry addExtensions:[SecurityRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - FankFankRoot_FileDescriptor

static GPBFileDescriptor *FankFankRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.bankapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FankClient

@implementation FankClient

@dynamic id_p;
@dynamic firstName;
@dynamic lastName;

typedef struct FankClient__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *firstName;
  NSString *lastName;
} FankClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FankClient_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankClient__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.className = NULL,
        .number = FankClient_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankClient__storage_, firstName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.className = NULL,
        .number = FankClient_FieldNumber_LastName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankClient__storage_, lastName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankClient class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankClient__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAccount

@implementation FankAccount

@dynamic name;
@dynamic accountNumber;
@dynamic hasBalance, balance;

typedef struct FankAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *accountNumber;
  Money *balance;
} FankAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FankAccount_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAccount__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = FankAccount_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAccount__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = FankAccount_FieldNumber_Balance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAccount__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAccount class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAccount__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddClientRequest

@implementation FankAddClientRequest

@dynamic firstName;
@dynamic lastName;

typedef struct FankAddClientRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *firstName;
  NSString *lastName;
} FankAddClientRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstName",
        .dataTypeSpecific.className = NULL,
        .number = FankAddClientRequest_FieldNumber_FirstName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddClientRequest__storage_, firstName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.className = NULL,
        .number = FankAddClientRequest_FieldNumber_LastName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAddClientRequest__storage_, lastName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddClientRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddClientRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddClientResponse

@implementation FankAddClientResponse

@dynamic hasClient, client;

typedef struct FankAddClientResponse__storage_ {
  uint32_t _has_storage_[1];
  FankClient *client;
} FankAddClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.className = GPBStringifySymbol(FankClient),
        .number = FankAddClientResponse_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddClientResponse__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddClientResponse class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddClientResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetClientRequest

@implementation FankGetClientRequest

@dynamic clientId;

typedef struct FankGetClientRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} FankGetClientRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = FankGetClientRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetClientRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetClientRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetClientRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetClientResponse

@implementation FankGetClientResponse

@dynamic hasClient, client;

typedef struct FankGetClientResponse__storage_ {
  uint32_t _has_storage_[1];
  FankClient *client;
} FankGetClientResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.className = GPBStringifySymbol(FankClient),
        .number = FankGetClientResponse_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetClientResponse__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetClientResponse class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetClientResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddAccountRequest

@implementation FankAddAccountRequest

@dynamic clientId;
@dynamic name;
@dynamic accountNumber;
@dynamic hasBalance, balance;

typedef struct FankAddAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *name;
  NSString *accountNumber;
  Money *balance;
} FankAddAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = FankAddAccountRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FankAddAccountRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = FankAddAccountRequest_FieldNumber_AccountNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = FankAddAccountRequest_FieldNumber_Balance,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FankAddAccountRequest__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddAccountRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddAccountRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAddAccountResponse

@implementation FankAddAccountResponse

@dynamic hasAccount, account;

typedef struct FankAddAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  FankAccount *account;
} FankAddAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(FankAccount),
        .number = FankAddAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAddAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAddAccountResponse class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAddAccountResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountsRequest

@implementation FankGetAccountsRequest

@dynamic clientId;

typedef struct FankGetAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
} FankGetAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = FankGetAccountsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountsRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountsRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountsResponse

@implementation FankGetAccountsResponse

@dynamic accountArray, accountArray_Count;

typedef struct FankGetAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *accountArray;
} FankGetAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FankAccount),
        .number = FankGetAccountsResponse_FieldNumber_AccountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankGetAccountsResponse__storage_, accountArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountsResponse class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountRequest

@implementation FankGetAccountRequest

@dynamic clientId;
@dynamic accountNumber;

typedef struct FankGetAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *accountNumber;
} FankGetAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = FankGetAccountRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = FankGetAccountRequest_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankGetAccountRequest__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankGetAccountResponse

@implementation FankGetAccountResponse

@dynamic hasAccount, account;

typedef struct FankGetAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  FankAccount *account;
} FankGetAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "account",
        .dataTypeSpecific.className = GPBStringifySymbol(FankAccount),
        .number = FankGetAccountResponse_FieldNumber_Account,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankGetAccountResponse__storage_, account),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankGetAccountResponse class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankGetAccountResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankAuthorizeLinkAccountsRequest

@implementation FankAuthorizeLinkAccountsRequest

@dynamic username;
@dynamic clientId;
@dynamic accountsArray, accountsArray_Count;

typedef struct FankAuthorizeLinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *clientId;
  NSMutableArray *accountsArray;
} FankAuthorizeLinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = NULL,
        .number = FankAuthorizeLinkAccountsRequest_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankAuthorizeLinkAccountsRequest__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankAuthorizeLinkAccountsRequest class]
                                     rootClass:[FankFankRoot class]
                                          file:FankFankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankAuthorizeLinkAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
