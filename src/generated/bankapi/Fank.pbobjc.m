// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankapi/fank.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "bankapi/Fank.pbobjc.h"
 #import "Money.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FankRoot

@implementation FankRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[MoneyRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - FankRoot_FileDescriptor

static GPBFileDescriptor *FankRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.bankapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FankMetadata

@implementation FankMetadata

@dynamic hasClient, client;
@dynamic clientAccountsArray, clientAccountsArray_Count;

typedef struct FankMetadata__storage_ {
  uint32_t _has_storage_[1];
  FankMetadata_Client *client;
  NSMutableArray *clientAccountsArray;
} FankMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "client",
        .dataTypeSpecific.className = GPBStringifySymbol(FankMetadata_Client),
        .number = FankMetadata_FieldNumber_Client,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankMetadata__storage_, client),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientAccountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FankMetadata_ClientAccount),
        .number = FankMetadata_FieldNumber_ClientAccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FankMetadata__storage_, clientAccountsArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankMetadata class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankMetadata__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000clientAccounts\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankMetadata_Client

@implementation FankMetadata_Client

@dynamic firstName;
@dynamic lastName;

typedef struct FankMetadata_Client__storage_ {
  uint32_t _has_storage_[1];
  NSString *firstName;
  NSString *lastName;
} FankMetadata_Client__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstName",
        .dataTypeSpecific.className = NULL,
        .number = FankMetadata_Client_FieldNumber_FirstName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankMetadata_Client__storage_, firstName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.className = NULL,
        .number = FankMetadata_Client_FieldNumber_LastName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankMetadata_Client__storage_, lastName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankMetadata_Client class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankMetadata_Client__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FankMetadata_ClientAccount

@implementation FankMetadata_ClientAccount

@dynamic name;
@dynamic accountNumber;
@dynamic hasBalance, balance;

typedef struct FankMetadata_ClientAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *accountNumber;
  Money *balance;
} FankMetadata_ClientAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FankMetadata_ClientAccount_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FankMetadata_ClientAccount__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountNumber",
        .dataTypeSpecific.className = NULL,
        .number = FankMetadata_ClientAccount_FieldNumber_AccountNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FankMetadata_ClientAccount__storage_, accountNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = GPBStringifySymbol(Money),
        .number = FankMetadata_ClientAccount_FieldNumber_Balance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FankMetadata_ClientAccount__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FankMetadata_ClientAccount class]
                                     rootClass:[FankRoot class]
                                          file:FankRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FankMetadata_ClientAccount__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
