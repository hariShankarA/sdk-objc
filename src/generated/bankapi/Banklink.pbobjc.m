// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankapi/banklink.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "bankapi/Banklink.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BanklinkRoot

@implementation BanklinkRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - BanklinkRoot_FileDescriptor

static GPBFileDescriptor *BanklinkRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.bankapi"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AuthorizeLinkAccountsRequest

@implementation AuthorizeLinkAccountsRequest

@dynamic clientId;
@dynamic username;
@dynamic secret;
@dynamic accountsArray, accountsArray_Count;

typedef struct AuthorizeLinkAccountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientId;
  NSString *username;
  NSString *secret;
  NSMutableArray *accountsArray;
} AuthorizeLinkAccountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsRequest_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsRequest__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsRequest_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsRequest__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsRequest_FieldNumber_Secret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsRequest__storage_, secret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsArray",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsRequest_FieldNumber_AccountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsRequest__storage_, accountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthorizeLinkAccountsRequest class]
                                     rootClass:[BanklinkRoot class]
                                          file:BanklinkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AuthorizeLinkAccountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthorizeLinkAccountsResponse

@implementation AuthorizeLinkAccountsResponse

@dynamic bankId;
@dynamic bankName;
@dynamic accountsLinkPayload;

typedef struct AuthorizeLinkAccountsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *bankName;
  NSString *accountsLinkPayload;
} AuthorizeLinkAccountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsResponse_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsResponse__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankName",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsResponse_FieldNumber_BankName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsResponse__storage_, bankName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountsLinkPayload",
        .dataTypeSpecific.className = NULL,
        .number = AuthorizeLinkAccountsResponse_FieldNumber_AccountsLinkPayload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AuthorizeLinkAccountsResponse__storage_, accountsLinkPayload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthorizeLinkAccountsResponse class]
                                     rootClass:[BanklinkRoot class]
                                          file:BanklinkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AuthorizeLinkAccountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
