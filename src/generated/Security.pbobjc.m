// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: security.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Security.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SecurityRoot

@implementation SecurityRoot

@end

#pragma mark - SecurityRoot_FileDescriptor

static GPBFileDescriptor *SecurityRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.security"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Key

@implementation Key

@dynamic id_p;
@dynamic publicKey;
@dynamic level;

typedef struct Key__storage_ {
  uint32_t _has_storage_[1];
  Key_Level level;
  NSString *id_p;
  NSString *publicKey;
} Key__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Key_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Key__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = Key_FieldNumber_PublicKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Key__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.enumDescFunc = Key_Level_EnumDescriptor,
        .number = Key_FieldNumber_Level,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Key__storage_, level),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Key class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Key__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Key_Level_RawValue(Key *message) {
  GPBDescriptor *descriptor = [Key descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Key_FieldNumber_Level];
  return GPBGetMessageInt32Field(message, field);
}

void SetKey_Level_RawValue(Key *message, int32_t value) {
  GPBDescriptor *descriptor = [Key descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Key_FieldNumber_Level];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Key_Level

GPBEnumDescriptor *Key_Level_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Privileged\000Standard\000Low\000";
    static const int32_t values[] = {
        Key_Level_Privileged,
        Key_Level_Standard,
        Key_Level_Low,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Key_Level)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Key_Level_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Key_Level_IsValidValue(int32_t value__) {
  switch (value__) {
    case Key_Level_Privileged:
    case Key_Level_Standard:
    case Key_Level_Low:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Signature

@implementation Signature

@dynamic memberId;
@dynamic keyId;
@dynamic signature;

typedef struct Signature__storage_ {
  uint32_t _has_storage_[1];
  NSString *memberId;
  NSString *keyId;
  NSString *signature;
} Signature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "memberId",
        .dataTypeSpecific.className = NULL,
        .number = Signature_FieldNumber_MemberId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Signature__storage_, memberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyId",
        .dataTypeSpecific.className = NULL,
        .number = Signature_FieldNumber_KeyId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Signature__storage_, keyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = Signature_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Signature__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Signature class]
                                     rootClass:[SecurityRoot class]
                                          file:SecurityRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Signature__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
