// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Notification.pbobjc.h"
 #import "Security.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - NotificationRoot

@implementation NotificationRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[SecurityRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - NotificationRoot_FileDescriptor

static GPBFileDescriptor *NotificationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"io.token.proto.common.notification"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NotifyStatus

GPBEnumDescriptor *NotifyStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Accepted\000NoSubscribers\000";
    static const int32_t values[] = {
        NotifyStatus_Invalid,
        NotifyStatus_Accepted,
        NotifyStatus_NoSubscribers,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NotifyStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NotifyStatus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NotifyStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case NotifyStatus_Invalid:
    case NotifyStatus_Accepted:
    case NotifyStatus_NoSubscribers:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TransferProcessed

@implementation TransferProcessed

@dynamic transferId;

typedef struct TransferProcessed__storage_ {
  uint32_t _has_storage_[1];
  NSString *transferId;
} TransferProcessed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferId",
        .dataTypeSpecific.className = NULL,
        .number = TransferProcessed_FieldNumber_TransferId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferProcessed__storage_, transferId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferProcessed class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferProcessed__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccounts

@implementation LinkAccounts

@dynamic bankId;
@dynamic bankName;
@dynamic accountLinkPayloadsArray, accountLinkPayloadsArray_Count;

typedef struct LinkAccounts__storage_ {
  uint32_t _has_storage_[1];
  NSString *bankId;
  NSString *bankName;
  NSMutableArray *accountLinkPayloadsArray;
} LinkAccounts__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bankId",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccounts_FieldNumber_BankId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccounts__storage_, bankId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bankName",
        .dataTypeSpecific.className = NULL,
        .number = LinkAccounts_FieldNumber_BankName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkAccounts__storage_, bankName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountLinkPayloadsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SealedMessage),
        .number = LinkAccounts_FieldNumber_AccountLinkPayloadsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LinkAccounts__storage_, accountLinkPayloadsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccounts class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccounts__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StepUp

@implementation StepUp

@dynamic tokenId;

typedef struct StepUp__storage_ {
  uint32_t _has_storage_[1];
  NSString *tokenId;
} StepUp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.className = NULL,
        .number = StepUp_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StepUp__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StepUp class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StepUp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddKey

@implementation AddKey

@dynamic publicKey;
@dynamic name;

typedef struct AddKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *publicKey;
  NSString *name;
} AddKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = AddKey_FieldNumber_PublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddKey__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddKey_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddKey__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddKey class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddKey__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LinkAccountsAndAddKey

@implementation LinkAccountsAndAddKey

@dynamic hasLinkAccounts, linkAccounts;
@dynamic hasAddKey, addKey;

typedef struct LinkAccountsAndAddKey__storage_ {
  uint32_t _has_storage_[1];
  LinkAccounts *linkAccounts;
  AddKey *addKey;
} LinkAccountsAndAddKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkAccounts",
        .dataTypeSpecific.className = GPBStringifySymbol(LinkAccounts),
        .number = LinkAccountsAndAddKey_FieldNumber_LinkAccounts,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LinkAccountsAndAddKey__storage_, linkAccounts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.className = GPBStringifySymbol(AddKey),
        .number = LinkAccountsAndAddKey_FieldNumber_AddKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LinkAccountsAndAddKey__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LinkAccountsAndAddKey class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LinkAccountsAndAddKey__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyBody

@implementation NotifyBody

@dynamic bodyOneOfCase;
@dynamic transferProcessed;
@dynamic linkAccounts;
@dynamic stepUp;
@dynamic addKey;
@dynamic linkAccountsAndAddKey;

typedef struct NotifyBody__storage_ {
  uint32_t _has_storage_[2];
  TransferProcessed *transferProcessed;
  LinkAccounts *linkAccounts;
  StepUp *stepUp;
  AddKey *addKey;
  LinkAccountsAndAddKey *linkAccountsAndAddKey;
} NotifyBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transferProcessed",
        .dataTypeSpecific.className = GPBStringifySymbol(TransferProcessed),
        .number = NotifyBody_FieldNumber_TransferProcessed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, transferProcessed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkAccounts",
        .dataTypeSpecific.className = GPBStringifySymbol(LinkAccounts),
        .number = NotifyBody_FieldNumber_LinkAccounts,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, linkAccounts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stepUp",
        .dataTypeSpecific.className = GPBStringifySymbol(StepUp),
        .number = NotifyBody_FieldNumber_StepUp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, stepUp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addKey",
        .dataTypeSpecific.className = GPBStringifySymbol(AddKey),
        .number = NotifyBody_FieldNumber_AddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, addKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkAccountsAndAddKey",
        .dataTypeSpecific.className = GPBStringifySymbol(LinkAccountsAndAddKey),
        .number = NotifyBody_FieldNumber_LinkAccountsAndAddKey,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NotifyBody__storage_, linkAccountsAndAddKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyBody class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyBody__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "body",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void NotifyBody_ClearBodyOneOfCase(NotifyBody *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Notification

@implementation Notification

@dynamic id_p;
@dynamic subscriberId;
@dynamic hasContent, content;
@dynamic status;

typedef struct Notification__storage_ {
  uint32_t _has_storage_[1];
  Notification_Status status;
  NSString *id_p;
  NSString *subscriberId;
  NotificationContent *content;
} Notification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Notification_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Notification__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = Notification_FieldNumber_SubscriberId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Notification__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = GPBStringifySymbol(NotificationContent),
        .number = Notification_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Notification__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = Notification_Status_EnumDescriptor,
        .number = Notification_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Notification__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Notification class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Notification__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Notification_Status_RawValue(Notification *message) {
  GPBDescriptor *descriptor = [Notification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notification_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetNotification_Status_RawValue(Notification *message, int32_t value) {
  GPBDescriptor *descriptor = [Notification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Notification_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Notification_Status

GPBEnumDescriptor *Notification_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Invalid\000Pending\000Delivered\000";
    static const int32_t values[] = {
        Notification_Status_Invalid,
        Notification_Status_Pending,
        Notification_Status_Delivered,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Notification_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Notification_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Notification_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case Notification_Status_Invalid:
    case Notification_Status_Pending:
    case Notification_Status_Delivered:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NotificationContent

@implementation NotificationContent

@dynamic type;
@dynamic title;
@dynamic body;
@dynamic locKey;
@dynamic locArgsArray, locArgsArray_Count;
@dynamic payload;
@dynamic createdAtMs;

typedef struct NotificationContent__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *title;
  NSString *body;
  NSString *payload;
  NSString *locKey;
  NSMutableArray *locArgsArray;
  int64_t createdAtMs;
} NotificationContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_Body,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAtMs",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_CreatedAtMs,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, createdAtMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "locKey",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_LocKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, locKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locArgsArray",
        .dataTypeSpecific.className = NULL,
        .number = NotificationContent_FieldNumber_LocArgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotificationContent__storage_, locArgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotificationContent class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotificationContent__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
